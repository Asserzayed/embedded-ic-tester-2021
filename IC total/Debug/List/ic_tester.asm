
;CodeVisionAVR C Compiler V3.46a 
;(C) Copyright 1998-2021 Pavel Haiduc, HP InfoTech S.R.L.
;http://www.hpinfotech.ro

;Build configuration    : Debug
;Chip type              : ATmega32
;Program type           : Application
;Clock frequency        : 8.000000 MHz
;Memory model           : Small
;Optimize for           : Size
;(s)printf features     : int, width
;(s)scanf features      : int, width
;External RAM size      : 0
;Data Stack size        : 512 byte(s)
;Heap size              : 0 byte(s)
;Promote 'char' to 'int': Yes
;'char' is unsigned     : Yes
;8 bit enums            : Yes
;Global 'const' stored in FLASH: Yes
;Enhanced function parameter passing: Mode 2
;Enhanced core instructions: On
;Automatic register allocation for global variables: On
;Smart register allocation: On

	#define _MODEL_SMALL_

	#pragma AVRPART ADMIN PART_NAME ATmega32
	#pragma AVRPART MEMORY PROG_FLASH 32768
	#pragma AVRPART MEMORY EEPROM 1024
	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60

	#define CALL_SUPPORTED 1

	.LISTMAC
	.EQU UDRE=0x5
	.EQU RXC=0x7
	.EQU USR=0xB
	.EQU UDR=0xC
	.EQU SPSR=0xE
	.EQU SPDR=0xF
	.EQU EERE=0x0
	.EQU EEWE=0x1
	.EQU EEMWE=0x2
	.EQU EECR=0x1C
	.EQU EEDR=0x1D
	.EQU EEARL=0x1E
	.EQU EEARH=0x1F
	.EQU WDTCR=0x21
	.EQU MCUCR=0x35
	.EQU GICR=0x3B
	.EQU SPL=0x3D
	.EQU SPH=0x3E
	.EQU SREG=0x3F

	.DEF R0X0=R0
	.DEF R0X1=R1
	.DEF R0X2=R2
	.DEF R0X3=R3
	.DEF R0X4=R4
	.DEF R0X5=R5
	.DEF R0X6=R6
	.DEF R0X7=R7
	.DEF R0X8=R8
	.DEF R0X9=R9
	.DEF R0XA=R10
	.DEF R0XB=R11
	.DEF R0XC=R12
	.DEF R0XD=R13
	.DEF R0XE=R14
	.DEF R0XF=R15
	.DEF R0X10=R16
	.DEF R0X11=R17
	.DEF R0X12=R18
	.DEF R0X13=R19
	.DEF R0X14=R20
	.DEF R0X15=R21
	.DEF R0X16=R22
	.DEF R0X17=R23
	.DEF R0X18=R24
	.DEF R0X19=R25
	.DEF R0X1A=R26
	.DEF R0X1B=R27
	.DEF R0X1C=R28
	.DEF R0X1D=R29
	.DEF R0X1E=R30
	.DEF R0X1F=R31

	.EQU __SRAM_START=0x0060
	.EQU __SRAM_END=0x085F
	.EQU __DSTACK_SIZE=0x0200
	.EQU __HEAP_SIZE=0x0000
	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1

	.MACRO __CPD1N
	CPI  R30,LOW(@0)
	LDI  R26,HIGH(@0)
	CPC  R31,R26
	LDI  R26,BYTE3(@0)
	CPC  R22,R26
	LDI  R26,BYTE4(@0)
	CPC  R23,R26
	.ENDM

	.MACRO __CPD2N
	CPI  R26,LOW(@0)
	LDI  R30,HIGH(@0)
	CPC  R27,R30
	LDI  R30,BYTE3(@0)
	CPC  R24,R30
	LDI  R30,BYTE4(@0)
	CPC  R25,R30
	.ENDM

	.MACRO __CPWRR
	CP   R@0,R@2
	CPC  R@1,R@3
	.ENDM

	.MACRO __CPWRN
	CPI  R@0,LOW(@2)
	LDI  R30,HIGH(@2)
	CPC  R@1,R30
	.ENDM

	.MACRO __ADDB1MN
	SUBI R30,LOW(-@0-(@1))
	.ENDM

	.MACRO __ADDB2MN
	SUBI R26,LOW(-@0-(@1))
	.ENDM

	.MACRO __ADDW1MN
	SUBI R30,LOW(-@0-(@1))
	SBCI R31,HIGH(-@0-(@1))
	.ENDM

	.MACRO __ADDW2MN
	SUBI R26,LOW(-@0-(@1))
	SBCI R27,HIGH(-@0-(@1))
	.ENDM

	.MACRO __ADDW1FN
	SUBI R30,LOW(-2*@0-(@1))
	SBCI R31,HIGH(-2*@0-(@1))
	.ENDM

	.MACRO __ADDD1FN
	SUBI R30,LOW(-2*@0-(@1))
	SBCI R31,HIGH(-2*@0-(@1))
	SBCI R22,BYTE3(-2*@0-(@1))
	.ENDM

	.MACRO __ADDD1N
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	SBCI R22,BYTE3(-@0)
	SBCI R23,BYTE4(-@0)
	.ENDM

	.MACRO __ADDD2N
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	SBCI R24,BYTE3(-@0)
	SBCI R25,BYTE4(-@0)
	.ENDM

	.MACRO __SUBD1N
	SUBI R30,LOW(@0)
	SBCI R31,HIGH(@0)
	SBCI R22,BYTE3(@0)
	SBCI R23,BYTE4(@0)
	.ENDM

	.MACRO __SUBD2N
	SUBI R26,LOW(@0)
	SBCI R27,HIGH(@0)
	SBCI R24,BYTE3(@0)
	SBCI R25,BYTE4(@0)
	.ENDM

	.MACRO __ANDBMNN
	LDS  R30,@0+(@1)
	ANDI R30,LOW(@2)
	STS  @0+(@1),R30
	.ENDM

	.MACRO __ANDWMNN
	LDS  R30,@0+(@1)
	ANDI R30,LOW(@2)
	STS  @0+(@1),R30
	LDS  R30,@0+(@1)+1
	ANDI R30,HIGH(@2)
	STS  @0+(@1)+1,R30
	.ENDM

	.MACRO __ANDD1N
	ANDI R30,LOW(@0)
	ANDI R31,HIGH(@0)
	ANDI R22,BYTE3(@0)
	ANDI R23,BYTE4(@0)
	.ENDM

	.MACRO __ANDD2N
	ANDI R26,LOW(@0)
	ANDI R27,HIGH(@0)
	ANDI R24,BYTE3(@0)
	ANDI R25,BYTE4(@0)
	.ENDM

	.MACRO __ORBMNN
	LDS  R30,@0+(@1)
	ORI  R30,LOW(@2)
	STS  @0+(@1),R30
	.ENDM

	.MACRO __ORWMNN
	LDS  R30,@0+(@1)
	ORI  R30,LOW(@2)
	STS  @0+(@1),R30
	LDS  R30,@0+(@1)+1
	ORI  R30,HIGH(@2)
	STS  @0+(@1)+1,R30
	.ENDM

	.MACRO __ORD1N
	ORI  R30,LOW(@0)
	ORI  R31,HIGH(@0)
	ORI  R22,BYTE3(@0)
	ORI  R23,BYTE4(@0)
	.ENDM

	.MACRO __ORD2N
	ORI  R26,LOW(@0)
	ORI  R27,HIGH(@0)
	ORI  R24,BYTE3(@0)
	ORI  R25,BYTE4(@0)
	.ENDM

	.MACRO __DELAY_USB
	LDI  R24,LOW(@0)
__DELAY_USB_LOOP:
	DEC  R24
	BRNE __DELAY_USB_LOOP
	.ENDM

	.MACRO __DELAY_USW
	LDI  R24,LOW(@0)
	LDI  R25,HIGH(@0)
__DELAY_USW_LOOP:
	SBIW R24,1
	BRNE __DELAY_USW_LOOP
	.ENDM

	.MACRO __GETW1P
	LD   R30,X+
	LD   R31,X
	SBIW R26,1
	.ENDM

	.MACRO __GETD1S
	LDD  R30,Y+@0
	LDD  R31,Y+@0+1
	LDD  R22,Y+@0+2
	LDD  R23,Y+@0+3
	.ENDM

	.MACRO __GETD2S
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	LDD  R24,Y+@0+2
	LDD  R25,Y+@0+3
	.ENDM

	.MACRO __GETD1P_INC
	LD   R30,X+
	LD   R31,X+
	LD   R22,X+
	LD   R23,X+
	.ENDM

	.MACRO __GETD1P_DEC
	LD   R23,-X
	LD   R22,-X
	LD   R31,-X
	LD   R30,-X
	.ENDM

	.MACRO __PUTDP1
	ST   X+,R30
	ST   X+,R31
	ST   X+,R22
	ST   X,R23
	.ENDM

	.MACRO __PUTDP1_DEC
	ST   -X,R23
	ST   -X,R22
	ST   -X,R31
	ST   -X,R30
	.ENDM

	.MACRO __PUTD1S
	STD  Y+@0,R30
	STD  Y+@0+1,R31
	STD  Y+@0+2,R22
	STD  Y+@0+3,R23
	.ENDM

	.MACRO __PUTD2S
	STD  Y+@0,R26
	STD  Y+@0+1,R27
	STD  Y+@0+2,R24
	STD  Y+@0+3,R25
	.ENDM

	.MACRO __PUTDZ2
	STD  Z+@0,R26
	STD  Z+@0+1,R27
	STD  Z+@0+2,R24
	STD  Z+@0+3,R25
	.ENDM

	.MACRO __CLRD1S
	STD  Y+@0,R30
	STD  Y+@0+1,R30
	STD  Y+@0+2,R30
	STD  Y+@0+3,R30
	.ENDM

	.MACRO __CPD10
	SBIW R30,0
	SBCI R22,0
	SBCI R23,0
	.ENDM

	.MACRO __CPD20
	SBIW R26,0
	SBCI R24,0
	SBCI R25,0
	.ENDM

	.MACRO __ADDD12
	ADD  R30,R26
	ADC  R31,R27
	ADC  R22,R24
	ADC  R23,R25
	.ENDM

	.MACRO __ADDD21
	ADD  R26,R30
	ADC  R27,R31
	ADC  R24,R22
	ADC  R25,R23
	.ENDM

	.MACRO __SUBD12
	SUB  R30,R26
	SBC  R31,R27
	SBC  R22,R24
	SBC  R23,R25
	.ENDM

	.MACRO __SUBD21
	SUB  R26,R30
	SBC  R27,R31
	SBC  R24,R22
	SBC  R25,R23
	.ENDM

	.MACRO __ANDD12
	AND  R30,R26
	AND  R31,R27
	AND  R22,R24
	AND  R23,R25
	.ENDM

	.MACRO __ORD12
	OR   R30,R26
	OR   R31,R27
	OR   R22,R24
	OR   R23,R25
	.ENDM

	.MACRO __XORD12
	EOR  R30,R26
	EOR  R31,R27
	EOR  R22,R24
	EOR  R23,R25
	.ENDM

	.MACRO __XORD21
	EOR  R26,R30
	EOR  R27,R31
	EOR  R24,R22
	EOR  R25,R23
	.ENDM

	.MACRO __COMD1
	COM  R30
	COM  R31
	COM  R22
	COM  R23
	.ENDM

	.MACRO __MULD2_2
	LSL  R26
	ROL  R27
	ROL  R24
	ROL  R25
	.ENDM

	.MACRO __LSRD1
	LSR  R23
	ROR  R22
	ROR  R31
	ROR  R30
	.ENDM

	.MACRO __LSLD1
	LSL  R30
	ROL  R31
	ROL  R22
	ROL  R23
	.ENDM

	.MACRO __ASRB4
	ASR  R30
	ASR  R30
	ASR  R30
	ASR  R30
	.ENDM

	.MACRO __ASRW8
	MOV  R30,R31
	CLR  R31
	SBRC R30,7
	SER  R31
	.ENDM

	.MACRO __LSRD16
	MOV  R30,R22
	MOV  R31,R23
	LDI  R22,0
	LDI  R23,0
	.ENDM

	.MACRO __LSLD16
	MOV  R22,R30
	MOV  R23,R31
	LDI  R30,0
	LDI  R31,0
	.ENDM

	.MACRO __CWD1
	MOV  R22,R31
	ADD  R22,R22
	SBC  R22,R22
	MOV  R23,R22
	.ENDM

	.MACRO __CWD2
	MOV  R24,R27
	ADD  R24,R24
	SBC  R24,R24
	MOV  R25,R24
	.ENDM

	.MACRO __SETMSD1
	SER  R31
	SER  R22
	SER  R23
	.ENDM

	.MACRO __ADDW1R15
	CLR  R0
	ADD  R30,R15
	ADC  R31,R0
	.ENDM

	.MACRO __ADDW2R15
	CLR  R0
	ADD  R26,R15
	ADC  R27,R0
	.ENDM

	.MACRO __EQB12
	CP   R30,R26
	LDI  R30,1
	BREQ PC+2
	CLR  R30
	.ENDM

	.MACRO __NEB12
	CP   R30,R26
	LDI  R30,1
	BRNE PC+2
	CLR  R30
	.ENDM

	.MACRO __LEB12
	CP   R30,R26
	LDI  R30,1
	BRGE PC+2
	CLR  R30
	.ENDM

	.MACRO __GEB12
	CP   R26,R30
	LDI  R30,1
	BRGE PC+2
	CLR  R30
	.ENDM

	.MACRO __LTB12
	CP   R26,R30
	LDI  R30,1
	BRLT PC+2
	CLR  R30
	.ENDM

	.MACRO __GTB12
	CP   R30,R26
	LDI  R30,1
	BRLT PC+2
	CLR  R30
	.ENDM

	.MACRO __LEB12U
	CP   R30,R26
	LDI  R30,1
	BRSH PC+2
	CLR  R30
	.ENDM

	.MACRO __GEB12U
	CP   R26,R30
	LDI  R30,1
	BRSH PC+2
	CLR  R30
	.ENDM

	.MACRO __LTB12U
	CP   R26,R30
	LDI  R30,1
	BRLO PC+2
	CLR  R30
	.ENDM

	.MACRO __GTB12U
	CP   R30,R26
	LDI  R30,1
	BRLO PC+2
	CLR  R30
	.ENDM

	.MACRO __CPW01
	CLR  R0
	CP   R0,R30
	CPC  R0,R31
	.ENDM

	.MACRO __CPW02
	CLR  R0
	CP   R0,R26
	CPC  R0,R27
	.ENDM

	.MACRO __CPD12
	CP   R30,R26
	CPC  R31,R27
	CPC  R22,R24
	CPC  R23,R25
	.ENDM

	.MACRO __CPD21
	CP   R26,R30
	CPC  R27,R31
	CPC  R24,R22
	CPC  R25,R23
	.ENDM

	.MACRO __BSTB1
	CLT
	TST  R30
	BREQ PC+2
	SET
	.ENDM

	.MACRO __LNEGB1
	TST  R30
	LDI  R30,1
	BREQ PC+2
	CLR  R30
	.ENDM

	.MACRO __LNEGW1
	OR   R30,R31
	LDI  R30,1
	BREQ PC+2
	LDI  R30,0
	.ENDM

	.MACRO __POINTB1MN
	LDI  R30,LOW(@0+(@1))
	.ENDM

	.MACRO __POINTW1MN
	LDI  R30,LOW(@0+(@1))
	LDI  R31,HIGH(@0+(@1))
	.ENDM

	.MACRO __POINTD1M
	LDI  R30,LOW(@0)
	LDI  R31,HIGH(@0)
	LDI  R22,BYTE3(@0)
	LDI  R23,BYTE4(@0)
	.ENDM

	.MACRO __POINTW1FN
	LDI  R30,LOW(2*@0+(@1))
	LDI  R31,HIGH(2*@0+(@1))
	.ENDM

	.MACRO __POINTD1FN
	LDI  R30,LOW(2*@0+(@1))
	LDI  R31,HIGH(2*@0+(@1))
	LDI  R22,BYTE3(2*@0+(@1))
	LDI  R23,BYTE4(2*@0+(@1))
	.ENDM

	.MACRO __POINTB2MN
	LDI  R26,LOW(@0+(@1))
	.ENDM

	.MACRO __POINTW2MN
	LDI  R26,LOW(@0+(@1))
	LDI  R27,HIGH(@0+(@1))
	.ENDM

	.MACRO __POINTD2M
	LDI  R26,LOW(@0)
	LDI  R27,HIGH(@0)
	LDI  R24,BYTE3(@0)
	LDI  R25,BYTE4(@0)
	.ENDM

	.MACRO __POINTW2FN
	LDI  R26,LOW(2*@0+(@1))
	LDI  R27,HIGH(2*@0+(@1))
	.ENDM

	.MACRO __POINTD2FN
	LDI  R26,LOW(2*@0+(@1))
	LDI  R27,HIGH(2*@0+(@1))
	LDI  R24,BYTE3(2*@0+(@1))
	LDI  R25,BYTE4(2*@0+(@1))
	.ENDM

	.MACRO __POINTBRM
	LDI  R@0,LOW(@1)
	.ENDM

	.MACRO __POINTWRM
	LDI  R@0,LOW(@2)
	LDI  R@1,HIGH(@2)
	.ENDM

	.MACRO __POINTBRMN
	LDI  R@0,LOW(@1+(@2))
	.ENDM

	.MACRO __POINTWRMN
	LDI  R@0,LOW(@2+(@3))
	LDI  R@1,HIGH(@2+(@3))
	.ENDM

	.MACRO __POINTWRFN
	LDI  R@0,LOW(@2*2+(@3))
	LDI  R@1,HIGH(@2*2+(@3))
	.ENDM

	.MACRO __GETD1N
	LDI  R30,LOW(@0)
	LDI  R31,HIGH(@0)
	LDI  R22,BYTE3(@0)
	LDI  R23,BYTE4(@0)
	.ENDM

	.MACRO __GETD2N
	LDI  R26,LOW(@0)
	LDI  R27,HIGH(@0)
	LDI  R24,BYTE3(@0)
	LDI  R25,BYTE4(@0)
	.ENDM

	.MACRO __GETB1MN
	LDS  R30,@0+(@1)
	.ENDM

	.MACRO __GETB1HMN
	LDS  R31,@0+(@1)
	.ENDM

	.MACRO __GETW1MN
	LDS  R30,@0+(@1)
	LDS  R31,@0+(@1)+1
	.ENDM

	.MACRO __GETD1MN
	LDS  R30,@0+(@1)
	LDS  R31,@0+(@1)+1
	LDS  R22,@0+(@1)+2
	LDS  R23,@0+(@1)+3
	.ENDM

	.MACRO __GETBRMN
	LDS  R@0,@1+(@2)
	.ENDM

	.MACRO __GETWRMN
	LDS  R@0,@2+(@3)
	LDS  R@1,@2+(@3)+1
	.ENDM

	.MACRO __GETWRZ
	LDD  R@0,Z+@2
	LDD  R@1,Z+@2+1
	.ENDM

	.MACRO __GETD2Z
	LDD  R26,Z+@0
	LDD  R27,Z+@0+1
	LDD  R24,Z+@0+2
	LDD  R25,Z+@0+3
	.ENDM

	.MACRO __GETB2MN
	LDS  R26,@0+(@1)
	.ENDM

	.MACRO __GETW2MN
	LDS  R26,@0+(@1)
	LDS  R27,@0+(@1)+1
	.ENDM

	.MACRO __GETD2MN
	LDS  R26,@0+(@1)
	LDS  R27,@0+(@1)+1
	LDS  R24,@0+(@1)+2
	LDS  R25,@0+(@1)+3
	.ENDM

	.MACRO __PUTB1MN
	STS  @0+(@1),R30
	.ENDM

	.MACRO __PUTW1MN
	STS  @0+(@1),R30
	STS  @0+(@1)+1,R31
	.ENDM

	.MACRO __PUTD1MN
	STS  @0+(@1),R30
	STS  @0+(@1)+1,R31
	STS  @0+(@1)+2,R22
	STS  @0+(@1)+3,R23
	.ENDM

	.MACRO __PUTB1EN
	LDI  R26,LOW(@0+(@1))
	LDI  R27,HIGH(@0+(@1))
	CALL __EEPROMWRB
	.ENDM

	.MACRO __PUTW1EN
	LDI  R26,LOW(@0+(@1))
	LDI  R27,HIGH(@0+(@1))
	CALL __EEPROMWRW
	.ENDM

	.MACRO __PUTD1EN
	LDI  R26,LOW(@0+(@1))
	LDI  R27,HIGH(@0+(@1))
	CALL __EEPROMWRD
	.ENDM

	.MACRO __PUTBR0MN
	STS  @0+(@1),R0
	.ENDM

	.MACRO __PUTBMRN
	STS  @0+(@1),R@2
	.ENDM

	.MACRO __PUTWMRN
	STS  @0+(@1),R@2
	STS  @0+(@1)+1,R@3
	.ENDM

	.MACRO __PUTBZR
	STD  Z+@1,R@0
	.ENDM

	.MACRO __PUTWZR
	STD  Z+@2,R@0
	STD  Z+@2+1,R@1
	.ENDM

	.MACRO __GETW1R
	MOV  R30,R@0
	MOV  R31,R@1
	.ENDM

	.MACRO __GETW2R
	MOV  R26,R@0
	MOV  R27,R@1
	.ENDM

	.MACRO __GETWRN
	LDI  R@0,LOW(@2)
	LDI  R@1,HIGH(@2)
	.ENDM

	.MACRO __PUTW1R
	MOV  R@0,R30
	MOV  R@1,R31
	.ENDM

	.MACRO __PUTW2R
	MOV  R@0,R26
	MOV  R@1,R27
	.ENDM

	.MACRO __ADDWRN
	SUBI R@0,LOW(-@2)
	SBCI R@1,HIGH(-@2)
	.ENDM

	.MACRO __ADDWRR
	ADD  R@0,R@2
	ADC  R@1,R@3
	.ENDM

	.MACRO __SUBWRN
	SUBI R@0,LOW(@2)
	SBCI R@1,HIGH(@2)
	.ENDM

	.MACRO __SUBWRR
	SUB  R@0,R@2
	SBC  R@1,R@3
	.ENDM

	.MACRO __ANDWRN
	ANDI R@0,LOW(@2)
	ANDI R@1,HIGH(@2)
	.ENDM

	.MACRO __ANDWRR
	AND  R@0,R@2
	AND  R@1,R@3
	.ENDM

	.MACRO __ORWRN
	ORI  R@0,LOW(@2)
	ORI  R@1,HIGH(@2)
	.ENDM

	.MACRO __ORWRR
	OR   R@0,R@2
	OR   R@1,R@3
	.ENDM

	.MACRO __EORWRR
	EOR  R@0,R@2
	EOR  R@1,R@3
	.ENDM

	.MACRO __GETWRS
	LDD  R@0,Y+@2
	LDD  R@1,Y+@2+1
	.ENDM

	.MACRO __PUTBSR
	STD  Y+@1,R@0
	.ENDM

	.MACRO __PUTWSR
	STD  Y+@2,R@0
	STD  Y+@2+1,R@1
	.ENDM

	.MACRO __MOVEWRR
	MOV  R@0,R@2
	MOV  R@1,R@3
	.ENDM

	.MACRO __INWR
	IN   R@0,@2
	IN   R@1,@2+1
	.ENDM

	.MACRO __OUTWR
	OUT  @2+1,R@1
	OUT  @2,R@0
	.ENDM

	.MACRO __CALL1MN
	LDS  R30,@0+(@1)
	LDS  R31,@0+(@1)+1
	ICALL
	.ENDM

	.MACRO __CALL1FN
	LDI  R30,LOW(2*@0+(@1))
	LDI  R31,HIGH(2*@0+(@1))
	CALL __GETW1PF
	ICALL
	.ENDM

	.MACRO __CALL2EN
	PUSH R26
	PUSH R27
	LDI  R26,LOW(@0+(@1))
	LDI  R27,HIGH(@0+(@1))
	CALL __EEPROMRDW
	POP  R27
	POP  R26
	ICALL
	.ENDM

	.MACRO __CALL2EX
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	CALL __EEPROMRDD
	ICALL
	.ENDM

	.MACRO __GETW1STACK
	IN   R30,SPL
	IN   R31,SPH
	ADIW R30,@0+1
	LD   R0,Z+
	LD   R31,Z
	MOV  R30,R0
	.ENDM

	.MACRO __GETD1STACK
	IN   R30,SPL
	IN   R31,SPH
	ADIW R30,@0+1
	LD   R0,Z+
	LD   R1,Z+
	LD   R22,Z
	MOVW R30,R0
	.ENDM

	.MACRO __NBST
	BST  R@0,@1
	IN   R30,SREG
	LDI  R31,0x40
	EOR  R30,R31
	OUT  SREG,R30
	.ENDM


	.MACRO __PUTB1SN
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1SN
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1SN
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X+,R31
	ST   X+,R22
	ST   X,R23
	.ENDM

	.MACRO __PUTB1SNS
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	ADIW R26,@1
	ST   X,R30
	.ENDM

	.MACRO __PUTW1SNS
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	ADIW R26,@1
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1SNS
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	ADIW R26,@1
	ST   X+,R30
	ST   X+,R31
	ST   X+,R22
	ST   X,R23
	.ENDM

	.MACRO __PUTB1PMN
	LDS  R26,@0
	LDS  R27,@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1PMN
	LDS  R26,@0
	LDS  R27,@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1PMN
	LDS  R26,@0
	LDS  R27,@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X+,R31
	ST   X+,R22
	ST   X,R23
	.ENDM

	.MACRO __PUTB1PMNS
	LDS  R26,@0
	LDS  R27,@0+1
	ADIW R26,@1
	ST   X,R30
	.ENDM

	.MACRO __PUTW1PMNS
	LDS  R26,@0
	LDS  R27,@0+1
	ADIW R26,@1
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1PMNS
	LDS  R26,@0
	LDS  R27,@0+1
	ADIW R26,@1
	ST   X+,R30
	ST   X+,R31
	ST   X+,R22
	ST   X,R23
	.ENDM

	.MACRO __PUTB1RN
	MOVW R26,R@0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1RN
	MOVW R26,R@0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1RN
	MOVW R26,R@0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X+,R31
	ST   X+,R22
	ST   X,R23
	.ENDM

	.MACRO __PUTB1RNS
	MOVW R26,R@0
	ADIW R26,@1
	ST   X,R30
	.ENDM

	.MACRO __PUTW1RNS
	MOVW R26,R@0
	ADIW R26,@1
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1RNS
	MOVW R26,R@0
	ADIW R26,@1
	ST   X+,R30
	ST   X+,R31
	ST   X+,R22
	ST   X,R23
	.ENDM

	.MACRO __PUTB1RON
	MOV  R26,R@0
	MOV  R27,R@1
	SUBI R26,LOW(-@2)
	SBCI R27,HIGH(-@2)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1RON
	MOV  R26,R@0
	MOV  R27,R@1
	SUBI R26,LOW(-@2)
	SBCI R27,HIGH(-@2)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1RON
	MOV  R26,R@0
	MOV  R27,R@1
	SUBI R26,LOW(-@2)
	SBCI R27,HIGH(-@2)
	ST   X+,R30
	ST   X+,R31
	ST   X+,R22
	ST   X,R23
	.ENDM

	.MACRO __PUTB1RONS
	MOV  R26,R@0
	MOV  R27,R@1
	ADIW R26,@2
	ST   X,R30
	.ENDM

	.MACRO __PUTW1RONS
	MOV  R26,R@0
	MOV  R27,R@1
	ADIW R26,@2
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1RONS
	MOV  R26,R@0
	MOV  R27,R@1
	ADIW R26,@2
	ST   X+,R30
	ST   X+,R31
	ST   X+,R22
	ST   X,R23
	.ENDM


	.MACRO __GETB1SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	LD   R30,Z
	.ENDM

	.MACRO __GETB1HSX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	LD   R31,Z
	.ENDM

	.MACRO __GETW1SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	CALL __GETW1Z
	.ENDM

	.MACRO __GETD1SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	CALL __GETD1Z
	.ENDM

	.MACRO __GETB2SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R26,X
	.ENDM

	.MACRO __GETW2SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	CALL __GETW2X
	.ENDM

	.MACRO __GETD2SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	CALL __GETD2X
	.ENDM

	.MACRO __GETBRSX
	MOVW R30,R28
	SUBI R30,LOW(-@1)
	SBCI R31,HIGH(-@1)
	LD   R@0,Z
	.ENDM

	.MACRO __GETWRSX
	MOVW R30,R28
	SUBI R30,LOW(-@2)
	SBCI R31,HIGH(-@2)
	LD   R@0,Z+
	LD   R@1,Z
	.ENDM

	.MACRO __GETBRSX2
	MOVW R26,R28
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	LD   R@0,X
	.ENDM

	.MACRO __GETWRSX2
	MOVW R26,R28
	SUBI R26,LOW(-@2)
	SBCI R27,HIGH(-@2)
	LD   R@0,X+
	LD   R@1,X
	.ENDM

	.MACRO __LSLW8SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	LD   R31,Z
	CLR  R30
	.ENDM

	.MACRO __PUTB1SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	ST   X+,R30
	ST   X+,R31
	ST   X+,R22
	ST   X,R23
	.ENDM

	.MACRO __CLRW1SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	ST   X+,R30
	ST   X,R30
	.ENDM

	.MACRO __CLRD1SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	ST   X+,R30
	ST   X+,R30
	ST   X+,R30
	ST   X,R30
	.ENDM

	.MACRO __PUTB2SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	ST   Z,R26
	.ENDM

	.MACRO __PUTW2SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	ST   Z+,R26
	ST   Z,R27
	.ENDM

	.MACRO __PUTD2SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	ST   Z+,R26
	ST   Z+,R27
	ST   Z+,R24
	ST   Z,R25
	.ENDM

	.MACRO __PUTBSRX
	MOVW R30,R28
	SUBI R30,LOW(-@1)
	SBCI R31,HIGH(-@1)
	ST   Z,R@0
	.ENDM

	.MACRO __PUTWSRX
	MOVW R30,R28
	SUBI R30,LOW(-@2)
	SBCI R31,HIGH(-@2)
	ST   Z+,R@0
	ST   Z,R@1
	.ENDM

	.MACRO __PUTB1SNX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R0,X+
	LD   R27,X
	MOV  R26,R0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1SNX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R0,X+
	LD   R27,X
	MOV  R26,R0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1SNX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R0,X+
	LD   R27,X
	MOV  R26,R0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X+,R31
	ST   X+,R22
	ST   X,R23
	.ENDM

	.MACRO __MULBRR
	MULS R@0,R@1
	MOVW R30,R0
	.ENDM

	.MACRO __MULBRRU
	MUL  R@0,R@1
	MOVW R30,R0
	.ENDM

	.MACRO __MULBRR0
	MULS R@0,R@1
	.ENDM

	.MACRO __MULBRRU0
	MUL  R@0,R@1
	.ENDM

	.MACRO __MULBNWRU
	LDI  R26,@2
	MUL  R26,R@0
	MOVW R30,R0
	MUL  R26,R@1
	ADD  R31,R0
	.ENDM

;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
	.DEF _i=R5
	.DEF _j=R4
	.DEF _check=R7
	.DEF _IC_FOUND=R6

	.CSEG
	.ORG 0x00

;START OF CODE MARKER
__START_OF_CODE:

;INTERRUPT VECTORS
	JMP  __RESET
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00

_tbl10_G100:
	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
	.DB  0x1,0x0
_tbl16_G100:
	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0

;GLOBAL REGISTER VARIABLES INITIALIZATION
__REG_VARS:
	.DB  0x0,0x0

_0x15F:
	.DB  LOW(_0x15E),HIGH(_0x15E),LOW(_0x15E+6),HIGH(_0x15E+6),LOW(_0x15E+12),HIGH(_0x15E+12),LOW(_0x15E+18),HIGH(_0x15E+18)
	.DB  LOW(_0x15E+24),HIGH(_0x15E+24),LOW(_0x15E+30),HIGH(_0x15E+30)
_0x160:
	.DB  LOW(_ic_74164),HIGH(_ic_74164),LOW(_ic_74165),HIGH(_ic_74165),LOW(_ic_74166),HIGH(_ic_74166),LOW(_ic_74173),HIGH(_ic_74173)
	.DB  LOW(_ic_74174),HIGH(_ic_74174),LOW(_ic_74175),HIGH(_ic_74175)
_0x0:
	.DB  0x37,0x34,0x31,0x36,0x34,0x0,0x37,0x34
	.DB  0x31,0x36,0x35,0x0,0x37,0x34,0x31,0x36
	.DB  0x36,0x0,0x37,0x34,0x31,0x37,0x33,0x0
	.DB  0x37,0x34,0x31,0x37,0x34,0x0,0x37,0x34
	.DB  0x31,0x37,0x35,0x0,0x49,0x43,0x20,0x25
	.DB  0x73,0x20,0x69,0x73,0x20,0x66,0x6F,0x75
	.DB  0x6E,0x64,0x0,0x4E,0x6F,0x20,0x49,0x43
	.DB  0x20,0x69,0x73,0x20,0x66,0x6F,0x75,0x6E
	.DB  0x64,0x0

__GLOBAL_INI_TBL:
	.DW  0x02
	.DW  0x06
	.DW  __REG_VARS*2

	.DW  0x06
	.DW  _0x15E
	.DW  _0x0*2

	.DW  0x06
	.DW  _0x15E+6
	.DW  _0x0*2+6

	.DW  0x06
	.DW  _0x15E+12
	.DW  _0x0*2+12

	.DW  0x06
	.DW  _0x15E+18
	.DW  _0x0*2+18

	.DW  0x06
	.DW  _0x15E+24
	.DW  _0x0*2+24

	.DW  0x06
	.DW  _0x15E+30
	.DW  _0x0*2+30

	.DW  0x0C
	.DW  _ICS
	.DW  _0x15F*2

	.DW  0x0C
	.DW  _ptr
	.DW  _0x160*2

_0xFFFFFFFF:
	.DW  0

#define __GLOBAL_INI_TBL_PRESENT 1

__RESET:
	CLI
	CLR  R30
	OUT  EECR,R30

;INTERRUPT VECTORS ARE PLACED
;AT THE START OF FLASH
	LDI  R31,1
	OUT  GICR,R31
	OUT  GICR,R30
	OUT  MCUCR,R30

;CLEAR R2-R14
	LDI  R24,(14-2)+1
	LDI  R26,2
	CLR  R27
__CLEAR_REG:
	ST   X+,R30
	DEC  R24
	BRNE __CLEAR_REG

;CLEAR SRAM
	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
	LDI  R26,__SRAM_START
__CLEAR_SRAM:
	ST   X+,R30
	SBIW R24,1
	BRNE __CLEAR_SRAM

;GLOBAL VARIABLES INITIALIZATION
	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
__GLOBAL_INI_NEXT:
	LPM  R24,Z+
	LPM  R25,Z+
	SBIW R24,0
	BREQ __GLOBAL_INI_END
	LPM  R26,Z+
	LPM  R27,Z+
	LPM  R0,Z+
	LPM  R1,Z+
	MOVW R22,R30
	MOVW R30,R0
__GLOBAL_INI_LOOP:
	LPM  R0,Z+
	ST   X+,R0
	SBIW R24,1
	BRNE __GLOBAL_INI_LOOP
	MOVW R30,R22
	RJMP __GLOBAL_INI_NEXT
__GLOBAL_INI_END:

;HARDWARE STACK POINTER INITIALIZATION
	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
	OUT  SPL,R30
	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
	OUT  SPH,R30

;DATA STACK POINTER INITIALIZATION
	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)

	JMP  _main

	.ESEG
	.ORG 0x00

	.DSEG
	.ORG 0x260

	.CSEG
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x80
	.EQU __sm_mask=0x70
	.EQU __sm_powerdown=0x20
	.EQU __sm_powersave=0x30
	.EQU __sm_standby=0x60
	.EQU __sm_ext_standby=0x70
	.EQU __sm_adc_noise_red=0x10
	.SET power_ctrl_reg=mcucr
	#endif
;char ic_74164(void)
; 0000 0059 {

	.CSEG
_ic_74164:
; .FSTART _ic_74164
; 0000 005A char D = 0b01010101;
; 0000 005B char X = 0b00000000;
; 0000 005C char temp=0b00000000;
; 0000 005D 
; 0000 005E // Input/Output Ports initialization
; 0000 005F // Port A initialization
; 0000 0060 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=Out
; 0000 0061 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (1<<DDA1) | (1<<DDA0);
	RCALL SUBOPT_0x0
;	D -> R17
;	X -> R16
;	temp -> R19
	LDI  R30,LOW(3)
	OUT  0x1A,R30
; 0000 0062 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=0 Bit0=0
; 0000 0063 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
	LDI  R30,LOW(0)
	OUT  0x1B,R30
; 0000 0064 
; 0000 0065 // Port C initialization
; 0000 0066 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=Out
; 0000 0067 DDRC=(0<<DDC7) | (1<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (1<<DDC1) | (1<<DDC0);
	RCALL SUBOPT_0x1
; 0000 0068 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=0 Bit0=0
; 0000 0069 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
; 0000 006A 
; 0000 006B // Port D initialization
; 0000 006C // Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 006D DDRD=(1<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
; 0000 006E // State: Bit7=0 Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 006F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
; 0000 0070 
; 0000 0071 check = 0;
; 0000 0072 PIND=0b00000000;
	LDI  R30,LOW(0)
	OUT  0x10,R30
; 0000 0073 
; 0000 0074 // Give the CLK LOW
; 0000 0075 IC_74164_CLOCK = LOW;
	CBI  0x1B,0
; 0000 0076 // INPUTS A,B AND CLR` GIVEN HIGH
; 0000 0077 IC_74164_A = HIGH;
	SBI  0x15,0
; 0000 0078 IC_74164_B = HIGH;
	SBI  0x15,1
; 0000 0079 IC_74164_CLEAR = HIGH;
	SBI  0x1B,1
; 0000 007A 
; 0000 007B // CHECK
; 0000 007C for(i=0;i<2;i++)
	CLR  R5
_0xC:
	LDI  R30,LOW(2)
	CP   R5,R30
	BRLO PC+2
	RJMP _0xD
; 0000 007D {
; 0000 007E X=D;
	MOV  R16,R17
; 0000 007F for(j=0;j<8;j++)
	CLR  R4
_0xF:
	LDI  R30,LOW(8)
	CP   R4,R30
	BRSH _0x10
; 0000 0080 {
; 0000 0081 temp = ( ( (X & 0b11111111) ^ 0b11111111) )% 2;
	MOV  R30,R16
	LDI  R26,LOW(255)
	EOR  R30,R26
	RCALL SUBOPT_0x2
	MOV  R19,R30
; 0000 0082 IC_74164_A = temp;
	CPI  R19,0
	BRNE _0x11
	CBI  0x15,0
	RJMP _0x12
_0x11:
	SBI  0x15,0
_0x12:
; 0000 0083 X = (X>>1);
	LSR  R16
; 0000 0084 // Give a Rising Edge
; 0000 0085 IC_74164_CLOCK = HIGH;
	SBI  0x1B,0
; 0000 0086 IC_74164_CLOCK = LOW;
	CBI  0x1B,0
; 0000 0087 delay_ms(500);
	LDI  R26,LOW(500)
	LDI  R27,HIGH(500)
	RCALL _delay_ms
; 0000 0088 }
	INC  R4
	RJMP _0xF
_0x10:
; 0000 0089 temp=((IC_74164_Q7<<7)|(IC_74164_Q6<<6)|(IC_74164_Q5<<5)|(IC_74164_Q4<<4)|(IC_74164_Q3<<3)|(IC_74164_Q2<<2)|(IC_74164_Q1<<1)|(IC_74164_Q0));
	LDI  R26,0
	SBIC 0x19,5
	LDI  R26,1
	RCALL SUBOPT_0x3
	RCALL SUBOPT_0x4
	MOV  R30,R26
	SWAP R30
	ANDI R30,0xF0
	LSL  R30
	LSL  R30
	OR   R0,R30
	LDI  R26,0
	SBIC 0x19,3
	LDI  R26,1
	MOV  R30,R26
	SWAP R30
	ANDI R30,0xF0
	LSL  R30
	OR   R0,R30
	LDI  R26,0
	SBIC 0x19,2
	LDI  R26,1
	MOV  R30,R26
	SWAP R30
	ANDI R30,0xF0
	OR   R0,R30
	LDI  R26,0
	SBIC 0x13,5
	LDI  R26,1
	MOV  R30,R26
	LSL  R30
	LSL  R30
	LSL  R30
	OR   R0,R30
	LDI  R26,0
	SBIC 0x13,4
	LDI  R26,1
	MOV  R30,R26
	LSL  R30
	LSL  R30
	OR   R0,R30
	LDI  R26,0
	SBIC 0x13,3
	LDI  R26,1
	MOV  R30,R26
	LSL  R30
	OR   R30,R0
	MOV  R26,R30
	LDI  R30,0
	SBIC 0x13,2
	LDI  R30,1
	OR   R30,R26
	MOV  R19,R30
; 0000 008A if(temp == D){
	CP   R17,R19
	BRNE _0x17
; 0000 008B PIND=temp;
	OUT  0x10,R19
; 0000 008C check++;
	INC  R7
; 0000 008D }
; 0000 008E else{
	RJMP _0x18
_0x17:
; 0000 008F PIND=temp;
	OUT  0x10,R19
; 0000 0090 delay_ms(1000);
	LDI  R26,LOW(1000)
	LDI  R27,HIGH(1000)
	RCALL _delay_ms
; 0000 0091 PIND=0b00000000;
	LDI  R30,LOW(0)
	OUT  0x10,R30
; 0000 0092 }
_0x18:
; 0000 0093 D = D^0b11111111;
	LDI  R30,LOW(255)
	EOR  R17,R30
; 0000 0094 PORTD=0b00000000;
	LDI  R30,LOW(0)
	OUT  0x12,R30
; 0000 0095 delay_ms(2000);
	LDI  R26,LOW(2000)
	LDI  R27,HIGH(2000)
	RCALL _delay_ms
; 0000 0096 }
	INC  R5
	RJMP _0xC
_0xD:
; 0000 0097 delay_ms(500);
	LDI  R26,LOW(500)
	LDI  R27,HIGH(500)
	RCALL _delay_ms
; 0000 0098 // APPLY CLR AND CHECK
; 0000 0099 IC_74164_CLEAR = LOW;
	CBI  0x1B,1
; 0000 009A IC_74164_CLEAR = HIGH;
	SBI  0x1B,1
; 0000 009B if( ((IC_74164_Q7 * (2^7) )+ (IC_74164_Q6 * (2^6) )+ (IC_74164_Q5 *(2^5))+ (IC_74164_Q4*(2^4))+ (IC_74164_Q3*(2^3))+(IC_74164_Q2*(2^2))+ (IC_74164_Q1*(2^1))+ (IC_74164_Q0*(1))) == 0)
	LDI  R26,0
	SBIC 0x19,5
	LDI  R26,1
	LDI  R30,LOW(5)
	MUL  R30,R26
	MOV  R18,R0
	LDI  R26,0
	SBIC 0x19,4
	LDI  R26,1
	LDI  R30,LOW(4)
	MUL  R30,R26
	MOVW R30,R0
	ADD  R18,R30
	LDI  R26,0
	SBIC 0x19,3
	LDI  R26,1
	LDI  R30,LOW(7)
	MUL  R30,R26
	MOVW R30,R0
	ADD  R18,R30
	LDI  R26,0
	SBIC 0x19,2
	LDI  R26,1
	LDI  R30,LOW(6)
	RCALL SUBOPT_0x5
	LDI  R26,0
	SBIC 0x13,5
	LDI  R26,1
	MOV  R30,R26
	ADD  R0,R30
	LDI  R26,0
	SBIC 0x13,4
	LDI  R26,1
	LDI  R30,LOW(0)
	ADD  R30,R0
	MOV  R18,R30
	LDI  R26,0
	SBIC 0x13,3
	LDI  R26,1
	LDI  R30,LOW(3)
	RCALL SUBOPT_0x5
	LDI  R26,0
	SBIC 0x13,2
	LDI  R26,1
	MOV  R30,R26
	ADD  R30,R0
	BRNE _0x1D
; 0000 009C {
; 0000 009D check++;
	INC  R7
; 0000 009E }
; 0000 009F if(check==3)
_0x1D:
	LDI  R30,LOW(3)
	CP   R30,R7
	BRNE _0x1E
; 0000 00A0 {
; 0000 00A1 return 1;
	LDI  R30,LOW(1)
	RJMP _0x2060003
; 0000 00A2 }
; 0000 00A3 return 0;
_0x1E:
	RJMP _0x2060004
; 0000 00A4 }
; .FEND
;char ic_74165(void){
; 0000 00BD char ic_74165(void){
_ic_74165:
; .FSTART _ic_74165
; 0000 00BE char D = 0b01010101;
; 0000 00BF char X=0;
; 0000 00C0 char Y=0;
; 0000 00C1 char temp=0;
; 0000 00C2 
; 0000 00C3 // Input/Output Ports initialization
; 0000 00C4 // Port A initialization
; 0000 00C5 // Function: Bit7=In Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=In
; 0000 00C6 DDRA=(0<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (0<<DDA0);
	RCALL SUBOPT_0x0
;	D -> R17
;	X -> R16
;	Y -> R19
;	temp -> R18
	LDI  R18,0
	LDI  R30,LOW(126)
	RCALL SUBOPT_0x6
; 0000 00C7 // State: Bit7=T Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=T
; 0000 00C8 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
; 0000 00C9 
; 0000 00CA // Port B initialization
; 0000 00CB // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00CC DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
; 0000 00CD // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00CE PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
; 0000 00CF 
; 0000 00D0 // Port C initialization
; 0000 00D1 // Function: Bit7=In Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 00D2 DDRC=(0<<DDC7) | (0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
	LDI  R30,LOW(63)
	RCALL SUBOPT_0x7
; 0000 00D3 // State: Bit7=T Bit6=T Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 00D4 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
; 0000 00D5 
; 0000 00D6 // Port D initialization
; 0000 00D7 // Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00D8 DDRD=(1<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
; 0000 00D9 // State: Bit7=0 Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00DA PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
; 0000 00DB 
; 0000 00DC check = 0;
; 0000 00DD IC_74165_CLK = LOW;
	CBI  0x15,1
; 0000 00DE IC_74165_EN_ = LOW;
	CBI  0x1B,6
; 0000 00DF IC_74165_LOAD_ = HIGH;
	SBI  0x15,0
; 0000 00E0 
; 0000 00E1 for(i=0;i<2;i++){
	CLR  R5
_0x26:
	LDI  R30,LOW(2)
	CP   R5,R30
	BRSH _0x27
; 0000 00E2 X=D;
	MOV  R16,R17
; 0000 00E3 for(j=0;j<8;j++){
	CLR  R4
_0x29:
	LDI  R30,LOW(8)
	CP   R4,R30
	BRSH _0x2A
; 0000 00E4 temp = (X & 0b11111111) % 2;
	MOV  R30,R16
	RCALL SUBOPT_0x2
	MOV  R18,R30
; 0000 00E5 IC_74165_SI = temp;
	CPI  R18,0
	BRNE _0x2B
	CBI  0x1B,1
	RJMP _0x2C
_0x2B:
	SBI  0x1B,1
_0x2C:
; 0000 00E6 X = (X>>1);
	LSR  R16
; 0000 00E7 IC_74165_CLK = HIGH;
	RCALL SUBOPT_0x8
; 0000 00E8 IC_74165_CLK = LOW;
; 0000 00E9 delay_ms(200);
; 0000 00EA }
	INC  R4
	RJMP _0x29
_0x2A:
; 0000 00EB X=0;
	LDI  R16,LOW(0)
; 0000 00EC Y=0;
	LDI  R19,LOW(0)
; 0000 00ED for(j=0;j<8;j++){
	CLR  R4
_0x32:
	LDI  R30,LOW(8)
	CP   R4,R30
	BRSH _0x33
; 0000 00EE X=(X>>1)|(IC_74165_Q<<7);
	RCALL SUBOPT_0x9
	RCALL SUBOPT_0xA
; 0000 00EF Y=(Y>>1)|((~IC_74165_Q_)<<7);
	OR   R30,R0
	MOV  R19,R30
; 0000 00F0 IC_74165_CLK = HIGH;
	RCALL SUBOPT_0x8
; 0000 00F1 IC_74165_CLK = LOW;
; 0000 00F2 delay_ms(200);
; 0000 00F3 }
	INC  R4
	RJMP _0x32
_0x33:
; 0000 00F4 if(X==D | Y==D){
	RCALL SUBOPT_0xB
	BREQ _0x38
; 0000 00F5 check++;
	INC  R7
; 0000 00F6 }
; 0000 00F7 D = D ^ 0b11111111;
_0x38:
	RCALL SUBOPT_0xC
; 0000 00F8 delay_ms(200);
; 0000 00F9 }
	INC  R5
	RJMP _0x26
_0x27:
; 0000 00FA delay_ms(500);
	LDI  R26,LOW(500)
	LDI  R27,HIGH(500)
	RCALL _delay_ms
; 0000 00FB for(i=0;i<2;i++){
	CLR  R5
_0x3A:
	LDI  R30,LOW(2)
	CP   R5,R30
	BRLO PC+2
	RJMP _0x3B
; 0000 00FC IC_74165_LOAD_ = LOW;
	CBI  0x15,0
; 0000 00FD IC_74165_D0=((D&0b10000000)>>7);
	RCALL SUBOPT_0xD
	BRNE _0x3E
	CBI  0x1B,2
	RJMP _0x3F
_0x3E:
	SBI  0x1B,2
_0x3F:
; 0000 00FE IC_74165_D1=((D&0b01000000)>>6);
	RCALL SUBOPT_0xE
	BRNE _0x40
	CBI  0x1B,3
	RJMP _0x41
_0x40:
	SBI  0x1B,3
_0x41:
; 0000 00FF IC_74165_D2=((D&0b00100000)>>5);
	RCALL SUBOPT_0xF
	BRNE _0x42
	CBI  0x1B,4
	RJMP _0x43
_0x42:
	SBI  0x1B,4
_0x43:
; 0000 0100 IC_74165_D3=((D&0b00010000)>>4);
	RCALL SUBOPT_0x10
	BRNE _0x44
	CBI  0x1B,5
	RJMP _0x45
_0x44:
	SBI  0x1B,5
_0x45:
; 0000 0101 IC_74165_D4=((D&0b00001000)>>3);
	RCALL SUBOPT_0x11
	BRNE _0x46
	CBI  0x15,2
	RJMP _0x47
_0x46:
	SBI  0x15,2
_0x47:
; 0000 0102 IC_74165_D5=((D&0b00000100)>>2);
	RCALL SUBOPT_0x12
	BRNE _0x48
	CBI  0x15,3
	RJMP _0x49
_0x48:
	SBI  0x15,3
_0x49:
; 0000 0103 IC_74165_D6=((D&0b10000010)>>1);
	RCALL SUBOPT_0x13
	BRNE _0x4A
	CBI  0x15,4
	RJMP _0x4B
_0x4A:
	SBI  0x15,4
_0x4B:
; 0000 0104 IC_74165_D7=(D&0b00000001);
	SBRC R17,0
	RJMP _0x4C
	CBI  0x15,5
	RJMP _0x4D
_0x4C:
	SBI  0x15,5
_0x4D:
; 0000 0105 IC_74165_CLK = HIGH;
	SBI  0x15,1
; 0000 0106 IC_74165_CLK = LOW;
	CBI  0x15,1
; 0000 0107 IC_74165_LOAD_ = HIGH;
	SBI  0x15,0
; 0000 0108 
; 0000 0109 X=0;
	LDI  R16,LOW(0)
; 0000 010A Y=0;
	LDI  R19,LOW(0)
; 0000 010B for(j=0;j<8;j++){
	CLR  R4
_0x55:
	LDI  R30,LOW(8)
	CP   R4,R30
	BRSH _0x56
; 0000 010C X=(X>>1)|(IC_74165_Q<<7);
	RCALL SUBOPT_0x9
	RCALL SUBOPT_0xA
; 0000 010D Y=(Y>>1)|((~IC_74165_Q_)<<7);
	OR   R30,R0
	MOV  R19,R30
; 0000 010E IC_74165_CLK = HIGH;
	RCALL SUBOPT_0x8
; 0000 010F IC_74165_CLK = LOW;
; 0000 0110 delay_ms(200);
; 0000 0111 }
	INC  R4
	RJMP _0x55
_0x56:
; 0000 0112 if(X==D | Y==D){
	RCALL SUBOPT_0xB
	BREQ _0x5B
; 0000 0113 check++;
	INC  R7
; 0000 0114 }
; 0000 0115 D = D ^ 0b11111111;
_0x5B:
	RCALL SUBOPT_0xC
; 0000 0116 delay_ms(200);
; 0000 0117 }
	INC  R5
	RJMP _0x3A
_0x3B:
; 0000 0118 if(check==4)
	LDI  R30,LOW(4)
	CP   R30,R7
	BRNE _0x5C
; 0000 0119 {
; 0000 011A return 1;
	LDI  R30,LOW(1)
	RJMP _0x2060003
; 0000 011B }
; 0000 011C return 0;
_0x5C:
	RJMP _0x2060004
; 0000 011D }
; .FEND
;char ic_74166(void){
; 0000 0136 char ic_74166(void){
_ic_74166:
; .FSTART _ic_74166
; 0000 0137 
; 0000 0138 char D = 0b01010101;
; 0000 0139 char X = 0;
; 0000 013A char temp = 0;
; 0000 013B 
; 0000 013C // Input/Output Ports initialization
; 0000 013D // Port A initialization
; 0000 013E // Function: Bit7=In Bit6=Out Bit5=Out Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 013F DDRA=(0<<DDA7) | (1<<DDA6) | (1<<DDA5) | (0<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
	RCALL SUBOPT_0x0
;	D -> R17
;	X -> R16
;	temp -> R19
	LDI  R30,LOW(111)
	RCALL SUBOPT_0x6
; 0000 0140 // State: Bit7=T Bit6=0 Bit5=0 Bit4=T Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0141 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
; 0000 0142 
; 0000 0143 // Port B initialization
; 0000 0144 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0145 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
; 0000 0146 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0147 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
; 0000 0148 
; 0000 0149 // Port C initialization
; 0000 014A // Function: Bit7=In Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 014B DDRC=(0<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
	LDI  R30,LOW(127)
	RCALL SUBOPT_0x7
; 0000 014C // State: Bit7=T Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 014D PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
; 0000 014E 
; 0000 014F // Port D initialization
; 0000 0150 // Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0151 DDRD=(1<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
; 0000 0152 // State: Bit7=0 Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0153 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
; 0000 0154 
; 0000 0155 check = 0;
; 0000 0156 IC_74166_CLK_INH = LOW;
	CBI  0x15,5
; 0000 0157 IC_74166_CLK = LOW;
	CBI  0x15,6
; 0000 0158 
; 0000 0159 IC_74166_CLR_ = HIGH;
	SBI  0x1B,0
; 0000 015A IC_74166_LOAD_ = HIGH;
	SBI  0x1B,6
; 0000 015B for(i=0;i<2;i++){
	CLR  R5
_0x66:
	LDI  R30,LOW(2)
	CP   R5,R30
	BRSH _0x67
; 0000 015C X = D;
	MOV  R16,R17
; 0000 015D for(j=0;j<8;j++){
	CLR  R4
_0x69:
	LDI  R30,LOW(8)
	CP   R4,R30
	BRSH _0x6A
; 0000 015E //SERIAL IN TRIAL
; 0000 015F temp = (X & 0b11111111) % 2;
	MOV  R30,R16
	RCALL SUBOPT_0x2
	MOV  R19,R30
; 0000 0160 IC_74166_SI = temp;
	CPI  R19,0
	BRNE _0x6B
	CBI  0x15,0
	RJMP _0x6C
_0x6B:
	SBI  0x15,0
_0x6C:
; 0000 0161 X = (X>>1);
	LSR  R16
; 0000 0162 IC_74166_CLK = HIGH;
	RCALL SUBOPT_0x14
; 0000 0163 IC_74166_CLK = LOW;
; 0000 0164 delay_ms(200);
; 0000 0165 }
	INC  R4
	RJMP _0x69
_0x6A:
; 0000 0166 X = 0;
	LDI  R16,LOW(0)
; 0000 0167 for(j=0;j<8;j++){
	CLR  R4
_0x72:
	LDI  R30,LOW(8)
	CP   R4,R30
	BRSH _0x73
; 0000 0168 //CHECK SERIAL-IN OUTPUT
; 0000 0169 X = (X>>1)|((IC_74166_SO)<<7);
	MOV  R30,R16
	LSR  R30
	RCALL SUBOPT_0x4
	RCALL SUBOPT_0x3
	OR   R30,R0
	MOV  R16,R30
; 0000 016A IC_74166_CLK = HIGH;
	RCALL SUBOPT_0x14
; 0000 016B IC_74166_CLK = LOW;
; 0000 016C delay_ms(200);
; 0000 016D }
	INC  R4
	RJMP _0x72
_0x73:
; 0000 016E if(X == D){
	CP   R17,R16
	BRNE _0x78
; 0000 016F check++;
	INC  R7
; 0000 0170 }
; 0000 0171 D = D^0b11111111;
_0x78:
	RCALL SUBOPT_0xC
; 0000 0172 delay_ms(200);
; 0000 0173 }
	INC  R5
	RJMP _0x66
_0x67:
; 0000 0174 delay_ms(1000);
	LDI  R26,LOW(1000)
	LDI  R27,HIGH(1000)
	RCALL _delay_ms
; 0000 0175 for(i=0;i<2;i++){
	CLR  R5
_0x7A:
	LDI  R30,LOW(2)
	CP   R5,R30
	BRSH _0x7B
; 0000 0176 IC_74166_LOAD_ = LOW;
	CBI  0x1B,6
; 0000 0177 //PARALLEL-IN OUTPUT TEST
; 0000 0178 IC_74166_D0 = ((D&0b10000000)>>7);
	RCALL SUBOPT_0xD
	BRNE _0x7E
	CBI  0x15,1
	RJMP _0x7F
_0x7E:
	SBI  0x15,1
_0x7F:
; 0000 0179 IC_74166_D1 = ((D&0b01000000)>>6);
	RCALL SUBOPT_0xE
	BRNE _0x80
	CBI  0x15,2
	RJMP _0x81
_0x80:
	SBI  0x15,2
_0x81:
; 0000 017A IC_74166_D2 = ((D&0b00100000)>>5);
	RCALL SUBOPT_0xF
	BRNE _0x82
	CBI  0x15,3
	RJMP _0x83
_0x82:
	SBI  0x15,3
_0x83:
; 0000 017B IC_74166_D3 = ((D&0b00010000)>>4);
	RCALL SUBOPT_0x10
	BRNE _0x84
	CBI  0x15,4
	RJMP _0x85
_0x84:
	SBI  0x15,4
_0x85:
; 0000 017C IC_74166_D4 = ((D&0b00001000)>>3);
	RCALL SUBOPT_0x11
	BRNE _0x86
	CBI  0x1B,1
	RJMP _0x87
_0x86:
	SBI  0x1B,1
_0x87:
; 0000 017D IC_74166_D5 = ((D&0b00000100)>>2);
	RCALL SUBOPT_0x12
	BRNE _0x88
	CBI  0x1B,2
	RJMP _0x89
_0x88:
	SBI  0x1B,2
_0x89:
; 0000 017E IC_74166_D6 = ((D&0b10000010)>>1);
	RCALL SUBOPT_0x13
	BRNE _0x8A
	CBI  0x1B,3
	RJMP _0x8B
_0x8A:
	SBI  0x1B,3
_0x8B:
; 0000 017F IC_74166_D7 = (D&0b00000001);
	SBRC R17,0
	RJMP _0x8C
	CBI  0x1B,5
	RJMP _0x8D
_0x8C:
	SBI  0x1B,5
_0x8D:
; 0000 0180 IC_74166_CLK = HIGH;
	SBI  0x15,6
; 0000 0181 IC_74166_CLK = LOW;
	CBI  0x15,6
; 0000 0182 IC_74166_LOAD_ = HIGH;
	SBI  0x1B,6
; 0000 0183 X=0;
	LDI  R16,LOW(0)
; 0000 0184 for(j=0;j<8;j++){
	CLR  R4
_0x95:
	LDI  R30,LOW(8)
	CP   R4,R30
	BRSH _0x96
; 0000 0185 //PARALLEL-IN OUTPUT CHECK
; 0000 0186 X = (X>>1)|((IC_74166_SO<<7));
	MOV  R30,R16
	LSR  R30
	RCALL SUBOPT_0x4
	RCALL SUBOPT_0x3
	RCALL SUBOPT_0x15
; 0000 0187 IC_74166_CLK = HIGH;
; 0000 0188 IC_74166_CLK = LOW;
; 0000 0189 delay_ms(500);
; 0000 018A }
	INC  R4
	RJMP _0x95
_0x96:
; 0000 018B if(X==D){
	CP   R17,R16
	BRNE _0x9B
; 0000 018C check++;
	INC  R7
; 0000 018D }
; 0000 018E D = D^0b111111111;
_0x9B:
	RCALL SUBOPT_0xC
; 0000 018F delay_ms(200);
; 0000 0190 }
	INC  R5
	RJMP _0x7A
_0x7B:
; 0000 0191 
; 0000 0192 IC_74166_CLR_ = LOW;
	RCALL SUBOPT_0x16
; 0000 0193 delay_ms(1000);
; 0000 0194 IC_74166_CLR_ = HIGH;
	SBI  0x1B,0
; 0000 0195 
; 0000 0196 X = 0;
	LDI  R16,LOW(0)
; 0000 0197 for(j=0;j<8;j++){
	CLR  R4
_0xA1:
	LDI  R30,LOW(8)
	CP   R4,R30
	BRSH _0xA2
; 0000 0198 //CLEAR CHECK
; 0000 0199 X = (X>>1)|((IC_74166_SO)<<7);
	MOV  R30,R16
	LSR  R30
	RCALL SUBOPT_0x4
	RCALL SUBOPT_0x3
	RCALL SUBOPT_0x15
; 0000 019A IC_74166_CLK = HIGH;
; 0000 019B IC_74166_CLK = LOW;
; 0000 019C delay_ms(500);
; 0000 019D }
	INC  R4
	RJMP _0xA1
_0xA2:
; 0000 019E if(X == 0){
	CPI  R16,0
	BRNE _0xA7
; 0000 019F check++;
	INC  R7
; 0000 01A0 }
; 0000 01A1 if(check==5)
_0xA7:
	LDI  R30,LOW(5)
	CP   R30,R7
	BRNE _0xA8
; 0000 01A2 {
; 0000 01A3 return 1;
	LDI  R30,LOW(1)
	RJMP _0x2060003
; 0000 01A4 }
; 0000 01A5 return 0;
_0xA8:
_0x2060004:
	LDI  R30,LOW(0)
_0x2060003:
	RCALL __LOADLOCR4
	ADIW R28,4
	RET
; 0000 01A6 }
; .FEND
;char ic_74173(void){
; 0000 01E1 char ic_74173(void){
_ic_74173:
; .FSTART _ic_74173
; 0000 01E2 
; 0000 01E3 char D=0b00000101;
; 0000 01E4 char temp=0b00000000;
; 0000 01E5 
; 0000 01E6 // Input/Output Ports initialization
; 0000 01E7 // Port A initialization
; 0000 01E8 // Function: Bit7=In Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 01E9 DDRA=(0<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
	RCALL SUBOPT_0x17
;	D -> R17
;	temp -> R16
	LDI  R30,LOW(127)
	RCALL SUBOPT_0x6
; 0000 01EA // State: Bit7=T Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 01EB PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
; 0000 01EC 
; 0000 01ED // Port B initialization
; 0000 01EE // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 01EF DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
; 0000 01F0 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 01F1 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
; 0000 01F2 
; 0000 01F3 // Port C initialization
; 0000 01F4 // Function: Bit7=In Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=Out
; 0000 01F5 DDRC=(0<<DDC7) | (1<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (1<<DDC1) | (1<<DDC0);
	RCALL SUBOPT_0x1
; 0000 01F6 // State: Bit7=T Bit6=0 Bit5=T Bit4=T Bit3=T Bit2=T Bit1=0 Bit0=0
; 0000 01F7 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
; 0000 01F8 
; 0000 01F9 // Port D initialization
; 0000 01FA // Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 01FB DDRD=(1<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
; 0000 01FC // State: Bit7=0 Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 01FD PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
; 0000 01FE 
; 0000 01FF check = 0;
; 0000 0200 IC_74173_CLK  = LOW;
	CBI  0x15,6
; 0000 0201 IC_74173_REST = LOW;
	CBI  0x1B,6
; 0000 0202 
; 0000 0203 IC_74173_OE1 = HIGH;
	SBI  0x15,0
; 0000 0204 IC_74173_OE2 = HIGH;
	SBI  0x15,1
; 0000 0205 
; 0000 0206 IC_74173_DE1 = HIGH;
	SBI  0x1B,0
; 0000 0207 IC_74173_DE2 = HIGH;
	SBI  0x1B,1
; 0000 0208 
; 0000 0209 //found = 0;
; 0000 020A for (i = 0; i < 2 ; i++)
	CLR  R5
_0xB6:
	LDI  R30,LOW(2)
	CP   R5,R30
	BRLO PC+2
	RJMP _0xB7
; 0000 020B {
; 0000 020C IC_74173_DE1 = LOW;
	CBI  0x1B,0
; 0000 020D IC_74173_DE2 = LOW;
	CBI  0x1B,1
; 0000 020E 
; 0000 020F temp = ((D&0b00001000)>>3);
	RCALL SUBOPT_0x18
	MOV  R16,R30
; 0000 0210 IC_74173_3D = temp;
	CPI  R16,0
	BRNE _0xBC
	CBI  0x1B,2
	RJMP _0xBD
_0xBC:
	SBI  0x1B,2
_0xBD:
; 0000 0211 temp = ((D&0b00000100)>>2);
	RCALL SUBOPT_0x19
	MOV  R16,R30
; 0000 0212 IC_74173_2D = temp;
	CPI  R16,0
	BRNE _0xBE
	CBI  0x1B,3
	RJMP _0xBF
_0xBE:
	SBI  0x1B,3
_0xBF:
; 0000 0213 temp = ((D&0b00000010)>>1);
	RCALL SUBOPT_0x1A
	MOV  R16,R30
; 0000 0214 IC_74173_1D = temp;
	CPI  R16,0
	BRNE _0xC0
	CBI  0x1B,4
	RJMP _0xC1
_0xC0:
	SBI  0x1B,4
_0xC1:
; 0000 0215 temp = (D&0b00000001);
	RCALL SUBOPT_0x1B
; 0000 0216 IC_74173_0D = temp;
	BRNE _0xC2
	CBI  0x1B,5
	RJMP _0xC3
_0xC2:
	SBI  0x1B,5
_0xC3:
; 0000 0217 
; 0000 0218 IC_74173_CLK = 1;
	SBI  0x15,6
; 0000 0219 IC_74173_CLK = 0;
	CBI  0x15,6
; 0000 021A delay_ms(100);
	LDI  R26,LOW(100)
	LDI  R27,0
	RCALL _delay_ms
; 0000 021B 
; 0000 021C IC_74173_3D = 0;
	CBI  0x1B,2
; 0000 021D IC_74173_2D = 0;
	CBI  0x1B,3
; 0000 021E IC_74173_1D = 0;
	CBI  0x1B,4
; 0000 021F IC_74173_0D = 0;
	CBI  0x1B,5
; 0000 0220 
; 0000 0221 IC_74173_DE1 = HIGH;
	SBI  0x1B,0
; 0000 0222 IC_74173_DE2 = HIGH;
	SBI  0x1B,1
; 0000 0223 
; 0000 0224 IC_74173_OE1 = LOW;
	CBI  0x15,0
; 0000 0225 IC_74173_OE2 = LOW;
	CBI  0x15,1
; 0000 0226 
; 0000 0227 if((IC_74173_3Q==((D&0b00001000)>>3)) && (IC_74173_2Q==((D&0b00000100)>>2))
; 0000 0228 && (IC_74173_1Q==((D&0b00000010)>>1)) && (IC_74173_0Q==(D&0b00000001)))
	LDI  R26,0
	SBIC 0x13,5
	LDI  R26,1
	RCALL SUBOPT_0x18
	LDI  R27,0
	CP   R30,R26
	CPC  R31,R27
	BRNE _0xD9
	LDI  R26,0
	SBIC 0x13,4
	LDI  R26,1
	RCALL SUBOPT_0x19
	LDI  R27,0
	CP   R30,R26
	CPC  R31,R27
	BRNE _0xD9
	LDI  R26,0
	SBIC 0x13,3
	LDI  R26,1
	RCALL SUBOPT_0x1A
	LDI  R27,0
	CP   R30,R26
	CPC  R31,R27
	BRNE _0xD9
	LDI  R26,0
	SBIC 0x13,2
	LDI  R26,1
	RCALL SUBOPT_0x1C
	BREQ _0xDA
_0xD9:
	RJMP _0xD8
_0xDA:
; 0000 0229 {
; 0000 022A 
; 0000 022B check++;
	INC  R7
; 0000 022C }
; 0000 022D 
; 0000 022E IC_74173_OE1 = HIGH;
_0xD8:
	SBI  0x15,0
; 0000 022F IC_74173_OE2 = HIGH;
	SBI  0x15,1
; 0000 0230 
; 0000 0231 D=D^0b00001111;
	LDI  R30,LOW(15)
	RCALL SUBOPT_0x1D
; 0000 0232 delay_ms(100);
; 0000 0233 }
	INC  R5
	RJMP _0xB6
_0xB7:
; 0000 0234 
; 0000 0235 IC_74173_REST = HIGH;
	SBI  0x1B,6
; 0000 0236 IC_74173_REST = LOW;
	CBI  0x1B,6
; 0000 0237 
; 0000 0238 IC_74173_OE1 = LOW;
	CBI  0x15,0
; 0000 0239 IC_74173_OE2 = LOW;
	CBI  0x15,1
; 0000 023A 
; 0000 023B if((IC_74173_3Q == 0x00) && (IC_74173_2Q == 0x00)
; 0000 023C && (IC_74173_1Q == 0x00) && (IC_74173_0Q == 0x00))
	SBIC 0x13,5
	RJMP _0xE8
	SBIC 0x13,4
	RJMP _0xE8
	SBIC 0x13,3
	RJMP _0xE8
	SBIS 0x13,2
	RJMP _0xE9
_0xE8:
	RJMP _0xE7
_0xE9:
; 0000 023D {
; 0000 023E check++;
	INC  R7
; 0000 023F }
; 0000 0240 
; 0000 0241 IC_74173_OE1 = HIGH;
_0xE7:
	SBI  0x15,0
; 0000 0242 IC_74173_OE2 = HIGH;
	SBI  0x15,1
; 0000 0243 
; 0000 0244 /* SWITCH THE INPUT Q TO BE OUTPUT*/
; 0000 0245 DDRC.2 = 1;
	SBI  0x14,2
; 0000 0246 DDRC.3 = 1;
	SBI  0x14,3
; 0000 0247 DDRC.4 = 1;
	SBI  0x14,4
; 0000 0248 DDRC.5 = 1;
	SBI  0x14,5
; 0000 0249 
; 0000 024A /* WRITE LOW TO THESE PINS */
; 0000 024B PORTC.2 = 0;
	CBI  0x15,2
; 0000 024C PORTC.3 = 0;
	CBI  0x15,3
; 0000 024D PORTC.4 = 0;
	CBI  0x15,4
; 0000 024E PORTC.5 = 0;
	CBI  0x15,5
; 0000 024F 
; 0000 0250 if((IC_74173_3Q == 0x00) && (IC_74173_2Q == 0x00)
; 0000 0251 && (IC_74173_1Q == 0x00) && (IC_74173_0Q == 0x00))
	SBIC 0x13,5
	RJMP _0xFF
	SBIC 0x13,4
	RJMP _0xFF
	SBIC 0x13,3
	RJMP _0xFF
	SBIS 0x13,2
	RJMP _0x100
_0xFF:
	RJMP _0xFE
_0x100:
; 0000 0252 {
; 0000 0253 check++;
	INC  R7
; 0000 0254 }
; 0000 0255 
; 0000 0256 /* WRITE HIGH TO THESE PINS */
; 0000 0257 PORTC.2 = 1;
_0xFE:
	SBI  0x15,2
; 0000 0258 PORTC.3 = 1;
	SBI  0x15,3
; 0000 0259 PORTC.4 = 1;
	SBI  0x15,4
; 0000 025A PORTC.5 = 1;
	SBI  0x15,5
; 0000 025B 
; 0000 025C if((IC_74173_3Q == 0x01) && (IC_74173_2Q == 0x01)
; 0000 025D && (IC_74173_1Q == 0x01) && (IC_74173_0Q == 0x01))
	SBIS 0x13,5
	RJMP _0x10A
	SBIS 0x13,4
	RJMP _0x10A
	SBIS 0x13,3
	RJMP _0x10A
	SBIC 0x13,2
	RJMP _0x10B
_0x10A:
	RJMP _0x109
_0x10B:
; 0000 025E {
; 0000 025F check++;
	INC  R7
; 0000 0260 }
; 0000 0261 
; 0000 0262 /* RESWITCH Q TO BE INPUT AGAIN */
; 0000 0263 DDRC.2 = 0;
_0x109:
	CBI  0x14,2
; 0000 0264 DDRC.3 = 0;
	CBI  0x14,3
; 0000 0265 DDRC.4 = 0;
	CBI  0x14,4
; 0000 0266 DDRA.0 = 0;
	CBI  0x1A,0
; 0000 0267 if(check==5)
	LDI  R30,LOW(5)
	CP   R30,R7
	BRNE _0x114
; 0000 0268 {
; 0000 0269 return 1;
	LDI  R30,LOW(1)
	RJMP _0x2060001
; 0000 026A }
; 0000 026B return 0;
_0x114:
	RJMP _0x2060002
; 0000 026C }
; .FEND
;char ic_74174(void){
; 0000 02A2 char ic_74174(void){
_ic_74174:
; .FSTART _ic_74174
; 0000 02A3 
; 0000 02A4 char D=0b00010101;
; 0000 02A5 char temp=0b00000000;
; 0000 02A6 
; 0000 02A7 // Input/Output Ports initialization
; 0000 02A8 // Port A initialization
; 0000 02A9 // Function: Bit7=In Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=Out Bit1=In Bit0=Out
; 0000 02AA DDRA=(0<<DDA7) | (0<<DDA6) | (1<<DDA5) | (1<<DDA4) | (0<<DDA3) | (1<<DDA2) | (0<<DDA1) | (1<<DDA0);
	ST   -Y,R17
	ST   -Y,R16
;	D -> R17
;	temp -> R16
	LDI  R17,21
	LDI  R16,0
	LDI  R30,LOW(53)
	RCALL SUBOPT_0x6
; 0000 02AB // State: Bit7=T Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=0 Bit1=T Bit0=0
; 0000 02AC PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
; 0000 02AD 
; 0000 02AE // Port B initialization
; 0000 02AF // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 02B0 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
; 0000 02B1 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 02B2 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
; 0000 02B3 
; 0000 02B4 // Port C initialization
; 0000 02B5 // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=Out Bit1=In Bit0=Out
; 0000 02B6 DDRC=(0<<DDC7) | (0<<DDC6) | (1<<DDC5) | (0<<DDC4) | (1<<DDC3) | (1<<DDC2) | (0<<DDC1) | (1<<DDC0);
	LDI  R30,LOW(45)
	RCALL SUBOPT_0x7
; 0000 02B7 // State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=0 Bit1=T Bit0=0
; 0000 02B8 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
; 0000 02B9 
; 0000 02BA // Port D initialization
; 0000 02BB // Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 02BC DDRD=(1<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
; 0000 02BD // State: Bit7=0 Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 02BE PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
; 0000 02BF 
; 0000 02C0 check = 0;
; 0000 02C1 IC_74174_CLK = LOW;
	CBI  0x1B,0
; 0000 02C2 IC_74174_CLR = HIGH;
	SBI  0x15,0
; 0000 02C3 
; 0000 02C4 for (i = 0; i < 2 ; i++)
	CLR  R5
_0x11A:
	LDI  R30,LOW(2)
	CP   R5,R30
	BRLO PC+2
	RJMP _0x11B
; 0000 02C5 {
; 0000 02C6 temp = ((D&0b00100000)>>5);
	RCALL SUBOPT_0x1E
	MOV  R16,R30
; 0000 02C7 IC_74174_6D = temp;
	CPI  R16,0
	BRNE _0x11C
	CBI  0x1B,5
	RJMP _0x11D
_0x11C:
	SBI  0x1B,5
_0x11D:
; 0000 02C8 temp = ((D&0b00010000)>>4);
	RCALL SUBOPT_0x1F
	MOV  R16,R30
; 0000 02C9 IC_74174_5D = temp;
	CPI  R16,0
	BRNE _0x11E
	CBI  0x1B,4
	RJMP _0x11F
_0x11E:
	SBI  0x1B,4
_0x11F:
; 0000 02CA temp = ((D&0b00001000)>>3);
	RCALL SUBOPT_0x18
	MOV  R16,R30
; 0000 02CB IC_74174_4D = temp;
	CPI  R16,0
	BRNE _0x120
	CBI  0x1B,2
	RJMP _0x121
_0x120:
	SBI  0x1B,2
_0x121:
; 0000 02CC temp = ((D&0b00000100)>>2);
	RCALL SUBOPT_0x19
	MOV  R16,R30
; 0000 02CD IC_74174_3D = temp;
	CPI  R16,0
	BRNE _0x122
	CBI  0x15,5
	RJMP _0x123
_0x122:
	SBI  0x15,5
_0x123:
; 0000 02CE temp = ((D&0b00000010)>>1);
	RCALL SUBOPT_0x1A
	MOV  R16,R30
; 0000 02CF IC_74174_2D = temp;
	CPI  R16,0
	BRNE _0x124
	CBI  0x15,3
	RJMP _0x125
_0x124:
	SBI  0x15,3
_0x125:
; 0000 02D0 temp = (D&0b00000001);
	RCALL SUBOPT_0x1B
; 0000 02D1 IC_74174_1D = temp;
	BRNE _0x126
	CBI  0x15,2
	RJMP _0x127
_0x126:
	SBI  0x15,2
_0x127:
; 0000 02D2 
; 0000 02D3 IC_74174_CLK = 1;
	SBI  0x1B,0
; 0000 02D4 IC_74174_CLK = 0;
	CBI  0x1B,0
; 0000 02D5 delay_ms(100);
	LDI  R26,LOW(100)
	LDI  R27,0
	RCALL _delay_ms
; 0000 02D6 IC_74174_6D = 0;
	CBI  0x1B,5
; 0000 02D7 IC_74174_5D = 0;
	CBI  0x1B,4
; 0000 02D8 IC_74174_4D = 0;
	CBI  0x1B,2
; 0000 02D9 IC_74174_3D = 0;
	CBI  0x15,5
; 0000 02DA IC_74174_2D = 0;
	CBI  0x15,3
; 0000 02DB IC_74174_1D = 0;
	CBI  0x15,2
; 0000 02DC 
; 0000 02DD if((IC_74174_6Q ==((D&0b00100000)>>5)) && (IC_74174_5Q == ((D&0b00010000)>>4))
; 0000 02DE && (IC_74174_4Q ==((D&0b00001000)>>3)) && (IC_74174_3Q==((D&0b00000100)>>2))
; 0000 02DF && (IC_74174_2Q==((D&0b00000010)>>1)) && (IC_74174_1Q==(D&0b00000001)))
	LDI  R26,0
	SBIC 0x19,6
	LDI  R26,1
	RCALL SUBOPT_0x1E
	LDI  R27,0
	CP   R30,R26
	CPC  R31,R27
	BRNE _0x139
	LDI  R26,0
	SBIC 0x19,3
	LDI  R26,1
	RCALL SUBOPT_0x1F
	LDI  R27,0
	CP   R30,R26
	CPC  R31,R27
	BRNE _0x139
	LDI  R26,0
	SBIC 0x19,1
	LDI  R26,1
	RCALL SUBOPT_0x18
	LDI  R27,0
	CP   R30,R26
	CPC  R31,R27
	BRNE _0x139
	LDI  R26,0
	SBIC 0x13,6
	LDI  R26,1
	RCALL SUBOPT_0x19
	LDI  R27,0
	CP   R30,R26
	CPC  R31,R27
	BRNE _0x139
	LDI  R26,0
	SBIC 0x13,4
	LDI  R26,1
	RCALL SUBOPT_0x1A
	LDI  R27,0
	CP   R30,R26
	CPC  R31,R27
	BRNE _0x139
	RCALL SUBOPT_0x20
	BREQ _0x13A
_0x139:
	RJMP _0x138
_0x13A:
; 0000 02E0 {
; 0000 02E1 check++;
	INC  R7
; 0000 02E2 }
; 0000 02E3 
; 0000 02E4 D=D^0b00111111;
_0x138:
	LDI  R30,LOW(63)
	RCALL SUBOPT_0x1D
; 0000 02E5 delay_ms(100);
; 0000 02E6 
; 0000 02E7 }
	INC  R5
	RJMP _0x11A
_0x11B:
; 0000 02E8 if(check==2)
	LDI  R30,LOW(2)
	CP   R30,R7
	BRNE _0x13B
; 0000 02E9 {
; 0000 02EA return 1;
	LDI  R30,LOW(1)
	RJMP _0x2060001
; 0000 02EB }
; 0000 02EC return 0;
_0x13B:
	RJMP _0x2060002
; 0000 02ED }
; .FEND
;char ic_74175(void){
; 0000 0323 char ic_74175(void){
_ic_74175:
; .FSTART _ic_74175
; 0000 0324 
; 0000 0325 char D=0b00000101;
; 0000 0326 char temp=0b00000000;
; 0000 0327 
; 0000 0328 // Input/Output Ports initialization
; 0000 0329 // Port A initialization
; 0000 032A // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=Out
; 0000 032B DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (1<<DDA4) | (1<<DDA3) | (0<<DDA2) | (0<<DDA1) | (1<<DDA0);
	RCALL SUBOPT_0x17
;	D -> R17
;	temp -> R16
	LDI  R30,LOW(25)
	RCALL SUBOPT_0x6
; 0000 032C // State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=0 Bit2=T Bit1=T Bit0=0
; 0000 032D PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
; 0000 032E 
; 0000 032F // Port B initialization
; 0000 0330 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0331 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
; 0000 0332 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0333 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
; 0000 0334 
; 0000 0335 // Port C initialization
; 0000 0336 // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=Out
; 0000 0337 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (1<<DDC4) | (1<<DDC3) | (0<<DDC2) | (0<<DDC1) | (1<<DDC0);
	LDI  R30,LOW(25)
	RCALL SUBOPT_0x7
; 0000 0338 // State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=0 Bit2=T Bit1=T Bit0=0
; 0000 0339 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
; 0000 033A 
; 0000 033B // Port D initialization
; 0000 033C // Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 033D DDRD=(1<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
; 0000 033E // State: Bit7=0 Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 033F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
; 0000 0340 
; 0000 0341 check = 0;
; 0000 0342 IC_74175_CLK = LOW;
	CBI  0x1B,0
; 0000 0343 IC_74175_CLR = HIGH;
	SBI  0x15,0
; 0000 0344 
; 0000 0345 for (i = 0; i < 2 ; i++)
	CLR  R5
_0x141:
	LDI  R30,LOW(2)
	CP   R5,R30
	BRLO PC+2
	RJMP _0x142
; 0000 0346 {
; 0000 0347 temp = ((D&0b00001000)>>3);
	RCALL SUBOPT_0x18
	MOV  R16,R30
; 0000 0348 IC_74175_4D = temp;
	CPI  R16,0
	BRNE _0x143
	CBI  0x1B,4
	RJMP _0x144
_0x143:
	SBI  0x1B,4
_0x144:
; 0000 0349 temp = ((D&0b00000100)>>2);
	RCALL SUBOPT_0x19
	MOV  R16,R30
; 0000 034A IC_74175_3D = temp;
	CPI  R16,0
	BRNE _0x145
	CBI  0x1B,3
	RJMP _0x146
_0x145:
	SBI  0x1B,3
_0x146:
; 0000 034B temp = ((D&0b00000010)>>1);
	RCALL SUBOPT_0x1A
	MOV  R16,R30
; 0000 034C IC_74175_2D = temp;
	CPI  R16,0
	BRNE _0x147
	CBI  0x15,4
	RJMP _0x148
_0x147:
	SBI  0x15,4
_0x148:
; 0000 034D temp = (D&0b00000001);
	RCALL SUBOPT_0x1B
; 0000 034E IC_74175_1D = temp;
	BRNE _0x149
	CBI  0x15,3
	RJMP _0x14A
_0x149:
	SBI  0x15,3
_0x14A:
; 0000 034F 
; 0000 0350 IC_74175_CLK = 1;
	SBI  0x1B,0
; 0000 0351 IC_74175_CLK = 0;
	RCALL SUBOPT_0x16
; 0000 0352 delay_ms(1000);
; 0000 0353 IC_74175_4D = 0;
	CBI  0x1B,4
; 0000 0354 IC_74175_3D = 0;
	CBI  0x1B,3
; 0000 0355 IC_74175_2D = 0;
	CBI  0x15,4
; 0000 0356 IC_74175_1D = 0;
	CBI  0x15,3
; 0000 0357 
; 0000 0358 if( (IC_74175_4Q==((D&0b00001000)>>3)) && (IC_74175_3Q==((D&0b00000100)>>2)) && (IC_74175_2Q==((D&0b00000010)>>1)) && (IC_74175_1Q==(D&0b00000001)) ){
	LDI  R26,0
	SBIC 0x19,6
	LDI  R26,1
	RCALL SUBOPT_0x18
	LDI  R27,0
	CP   R30,R26
	CPC  R31,R27
	BRNE _0x158
	LDI  R26,0
	SBIC 0x19,1
	LDI  R26,1
	RCALL SUBOPT_0x19
	LDI  R27,0
	CP   R30,R26
	CPC  R31,R27
	BRNE _0x158
	LDI  R26,0
	SBIC 0x13,6
	LDI  R26,1
	RCALL SUBOPT_0x1A
	LDI  R27,0
	CP   R30,R26
	CPC  R31,R27
	BRNE _0x158
	RCALL SUBOPT_0x20
	BREQ _0x159
_0x158:
	RJMP _0x157
_0x159:
; 0000 0359 check++;
	INC  R7
; 0000 035A }
; 0000 035B if( (~IC_74175_4Q_==((D&0b00001000)>>3)) && (~IC_74175_3Q_==((D&0b00000100)>>2)) && (~IC_74175_2Q_==((D&0b00000010)>>1)) && (~IC_74175_1Q_==(D&0b00000001)) ){
_0x157:
	LDI  R26,0
	SBIS 0x19,5
	LDI  R26,1
	RCALL SUBOPT_0x18
	LDI  R27,0
	CP   R30,R26
	CPC  R31,R27
	BRNE _0x15B
	LDI  R26,0
	SBIS 0x19,2
	LDI  R26,1
	RCALL SUBOPT_0x19
	LDI  R27,0
	CP   R30,R26
	CPC  R31,R27
	BRNE _0x15B
	LDI  R26,0
	SBIS 0x13,5
	LDI  R26,1
	RCALL SUBOPT_0x1A
	LDI  R27,0
	CP   R30,R26
	CPC  R31,R27
	BRNE _0x15B
	LDI  R26,0
	SBIS 0x13,2
	LDI  R26,1
	RCALL SUBOPT_0x1C
	BREQ _0x15C
_0x15B:
	RJMP _0x15A
_0x15C:
; 0000 035C check++;
	INC  R7
; 0000 035D }
; 0000 035E D=D^0b00001111;
_0x15A:
	LDI  R30,LOW(15)
	EOR  R17,R30
; 0000 035F delay_ms(1000);
	LDI  R26,LOW(1000)
	LDI  R27,HIGH(1000)
	RCALL _delay_ms
; 0000 0360 
; 0000 0361 }
	INC  R5
	RJMP _0x141
_0x142:
; 0000 0362 if(check==4)
	LDI  R30,LOW(4)
	CP   R30,R7
	BRNE _0x15D
; 0000 0363 {
; 0000 0364 return 1;
	LDI  R30,LOW(1)
	RJMP _0x2060001
; 0000 0365 }
; 0000 0366 return 0;
_0x15D:
_0x2060002:
	LDI  R30,LOW(0)
_0x2060001:
	LD   R16,Y+
	LD   R17,Y+
	RET
; 0000 0367 }
; .FEND

	.DSEG
_0x15E:
	.BYTE 0x24
;void main(void)
; 0000 036F {

	.CSEG
_main:
; .FSTART _main
; 0000 0370 // Timer/Counter 0 initialization
; 0000 0371 // Clock source: System Clock
; 0000 0372 // Clock value: Timer 0 Stopped
; 0000 0373 // Mode: Normal top=0xFF
; 0000 0374 // OC0 output: Disconnected
; 0000 0375 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
	LDI  R30,LOW(0)
	OUT  0x33,R30
; 0000 0376 TCNT0=0x00;
	OUT  0x32,R30
; 0000 0377 OCR0=0x00;
	OUT  0x3C,R30
; 0000 0378 
; 0000 0379 // Timer/Counter 1 initialization
; 0000 037A // Clock source: System Clock
; 0000 037B // Clock value: Timer1 Stopped
; 0000 037C // Mode: Normal top=0xFFFF
; 0000 037D // OC1A output: Disconnected
; 0000 037E // OC1B output: Disconnected
; 0000 037F // Noise Canceler: Off
; 0000 0380 // Input Capture on Falling Edge
; 0000 0381 // Timer1 Overflow Interrupt: Off
; 0000 0382 // Input Capture Interrupt: Off
; 0000 0383 // Compare A Match Interrupt: Off
; 0000 0384 // Compare B Match Interrupt: Off
; 0000 0385 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
	OUT  0x2F,R30
; 0000 0386 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
	OUT  0x2E,R30
; 0000 0387 TCNT1H=0x00;
	OUT  0x2D,R30
; 0000 0388 TCNT1L=0x00;
	OUT  0x2C,R30
; 0000 0389 ICR1H=0x00;
	OUT  0x27,R30
; 0000 038A ICR1L=0x00;
	OUT  0x26,R30
; 0000 038B OCR1AH=0x00;
	OUT  0x2B,R30
; 0000 038C OCR1AL=0x00;
	OUT  0x2A,R30
; 0000 038D OCR1BH=0x00;
	OUT  0x29,R30
; 0000 038E OCR1BL=0x00;
	OUT  0x28,R30
; 0000 038F 
; 0000 0390 // Timer/Counter 2 initialization
; 0000 0391 // Clock source: System Clock
; 0000 0392 // Clock value: Timer2 Stopped
; 0000 0393 // Mode: Normal top=0xFF
; 0000 0394 // OC2 output: Disconnected
; 0000 0395 ASSR=0<<AS2;
	OUT  0x22,R30
; 0000 0396 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
	OUT  0x25,R30
; 0000 0397 TCNT2=0x00;
	OUT  0x24,R30
; 0000 0398 OCR2=0x00;
	OUT  0x23,R30
; 0000 0399 
; 0000 039A // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 039B TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
	OUT  0x39,R30
; 0000 039C 
; 0000 039D // External Interrupt(s) initialization
; 0000 039E // INT0: Off
; 0000 039F // INT1: Off
; 0000 03A0 // INT2: Off
; 0000 03A1 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
	OUT  0x35,R30
; 0000 03A2 MCUCSR=(0<<ISC2);
	OUT  0x34,R30
; 0000 03A3 
; 0000 03A4 // USART initialization
; 0000 03A5 // USART disabled
; 0000 03A6 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
	OUT  0xA,R30
; 0000 03A7 
; 0000 03A8 // Analog Comparator initialization
; 0000 03A9 // Analog Comparator: Off
; 0000 03AA // The Analog Comparator's positive input is
; 0000 03AB // connected to the AIN0 pin
; 0000 03AC // The Analog Comparator's negative input is
; 0000 03AD // connected to the AIN1 pin
; 0000 03AE ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
	LDI  R30,LOW(128)
	OUT  0x8,R30
; 0000 03AF SFIOR=(0<<ACME);
	LDI  R30,LOW(0)
	OUT  0x30,R30
; 0000 03B0 
; 0000 03B1 // ADC initialization
; 0000 03B2 // ADC disabled
; 0000 03B3 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
	OUT  0x6,R30
; 0000 03B4 
; 0000 03B5 // SPI initialization
; 0000 03B6 // SPI disabled
; 0000 03B7 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
	OUT  0xD,R30
; 0000 03B8 
; 0000 03B9 // TWI initialization
; 0000 03BA // TWI disabled
; 0000 03BB TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
	OUT  0x36,R30
; 0000 03BC 
; 0000 03BD while(1)
_0x161:
; 0000 03BE {
; 0000 03BF if(1)
; 0000 03C0 {
; 0000 03C1 IC_FOUND = 0;
	CLR  R6
; 0000 03C2 for(i=0;i<NUMBER_OF_ICS;i++)
	CLR  R5
_0x166:
	LDI  R30,LOW(6)
	CP   R5,R30
	BRSH _0x167
; 0000 03C3 {
; 0000 03C4 if(ptr[i]())
	MOV  R30,R5
	LDI  R26,LOW(_ptr)
	LDI  R27,HIGH(_ptr)
	RCALL SUBOPT_0x21
	ICALL
	CPI  R30,0
	BREQ _0x168
; 0000 03C5 {
; 0000 03C6 IC_FOUND = 1;
	LDI  R30,LOW(1)
	MOV  R6,R30
; 0000 03C7 printf("IC %s is found",ICS[i]);
	__POINTW1FN _0x0,36
	ST   -Y,R31
	ST   -Y,R30
	MOV  R30,R5
	LDI  R26,LOW(_ICS)
	LDI  R27,HIGH(_ICS)
	RCALL SUBOPT_0x21
	CLR  R22
	CLR  R23
	RCALL __PUTPARD1
	LDI  R24,4
	RCALL _printf
	ADIW R28,6
; 0000 03C8 delay_ms(1000);
	LDI  R26,LOW(1000)
	LDI  R27,HIGH(1000)
	RCALL _delay_ms
; 0000 03C9 break;
	RJMP _0x167
; 0000 03CA }
; 0000 03CB }
_0x168:
	INC  R5
	RJMP _0x166
_0x167:
; 0000 03CC if(IC_FOUND==0)
	TST  R6
	BRNE _0x169
; 0000 03CD {
; 0000 03CE printf("No IC is found");
	__POINTW1FN _0x0,51
	ST   -Y,R31
	ST   -Y,R30
	LDI  R24,0
	RCALL _printf
	ADIW R28,2
; 0000 03CF delay_ms(1000);
	LDI  R26,LOW(1000)
	LDI  R27,HIGH(1000)
	RCALL _delay_ms
; 0000 03D0 }
; 0000 03D1 }
_0x169:
; 0000 03D2 }
	RJMP _0x161
; 0000 03D3 }
_0x16A:
	RJMP _0x16A
; .FEND
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x80
	.EQU __sm_mask=0x70
	.EQU __sm_powerdown=0x20
	.EQU __sm_powersave=0x30
	.EQU __sm_standby=0x60
	.EQU __sm_ext_standby=0x70
	.EQU __sm_adc_noise_red=0x10
	.SET power_ctrl_reg=mcucr
	#endif

	.CSEG
_putchar:
; .FSTART _putchar
	ST   -Y,R26
putchar0:
     sbis usr,udre
     rjmp putchar0
     ld   r30,y
     out  udr,r30
	ADIW R28,1
	RET
; .FEND
_put_usart_G100:
; .FSTART _put_usart_G100
	RCALL __SAVELOCR4
	MOVW R16,R26
	LDD  R19,Y+4
	MOV  R26,R19
	RCALL _putchar
	MOVW R26,R16
	LD   R30,X+
	LD   R31,X+
	ADIW R30,1
	ST   -X,R31
	ST   -X,R30
	RCALL __LOADLOCR4
	ADIW R28,5
	RET
; .FEND
__print_G100:
; .FSTART __print_G100
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,6
	RCALL __SAVELOCR6
	LDI  R17,0
	LDD  R26,Y+12
	LDD  R27,Y+12+1
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	ST   X+,R30
	ST   X,R31
_0x2000016:
	LDD  R30,Y+18
	LDD  R31,Y+18+1
	ADIW R30,1
	STD  Y+18,R30
	STD  Y+18+1,R31
	SBIW R30,1
	LPM  R30,Z
	MOV  R18,R30
	CPI  R30,0
	BRNE PC+2
	RJMP _0x2000018
	MOV  R30,R17
	CPI  R30,0
	BRNE _0x200001C
	CPI  R18,37
	BRNE _0x200001D
	LDI  R17,LOW(1)
	RJMP _0x200001E
_0x200001D:
	RCALL SUBOPT_0x22
_0x200001E:
	RJMP _0x200001B
_0x200001C:
	CPI  R30,LOW(0x1)
	BRNE _0x200001F
	CPI  R18,37
	BRNE _0x2000020
	RCALL SUBOPT_0x22
	RJMP _0x20000CC
_0x2000020:
	LDI  R17,LOW(2)
	LDI  R20,LOW(0)
	LDI  R16,LOW(0)
	CPI  R18,45
	BRNE _0x2000021
	LDI  R16,LOW(1)
	RJMP _0x200001B
_0x2000021:
	CPI  R18,43
	BRNE _0x2000022
	LDI  R20,LOW(43)
	RJMP _0x200001B
_0x2000022:
	CPI  R18,32
	BRNE _0x2000023
	LDI  R20,LOW(32)
	RJMP _0x200001B
_0x2000023:
	RJMP _0x2000024
_0x200001F:
	CPI  R30,LOW(0x2)
	BRNE _0x2000025
_0x2000024:
	LDI  R21,LOW(0)
	LDI  R17,LOW(3)
	CPI  R18,48
	BRNE _0x2000026
	ORI  R16,LOW(128)
	RJMP _0x200001B
_0x2000026:
	RJMP _0x2000027
_0x2000025:
	CPI  R30,LOW(0x3)
	BREQ PC+2
	RJMP _0x200001B
_0x2000027:
	CPI  R18,48
	BRLO _0x200002A
	CPI  R18,58
	BRLO _0x200002B
_0x200002A:
	RJMP _0x2000029
_0x200002B:
	LDI  R26,LOW(10)
	MUL  R21,R26
	MOV  R21,R0
	MOV  R30,R18
	SUBI R30,LOW(48)
	ADD  R21,R30
	RJMP _0x200001B
_0x2000029:
	MOV  R30,R18
	CPI  R30,LOW(0x63)
	BRNE _0x200002F
	RCALL SUBOPT_0x23
	LDD  R30,Y+16
	LDD  R31,Y+16+1
	LDD  R26,Z+4
	ST   -Y,R26
	RCALL SUBOPT_0x24
	RJMP _0x2000030
_0x200002F:
	CPI  R30,LOW(0x73)
	BRNE _0x2000032
	RCALL SUBOPT_0x23
	RCALL SUBOPT_0x25
	RCALL _strlen
	MOV  R17,R30
	RJMP _0x2000033
_0x2000032:
	CPI  R30,LOW(0x70)
	BRNE _0x2000035
	RCALL SUBOPT_0x23
	RCALL SUBOPT_0x25
	RCALL _strlenf
	MOV  R17,R30
	ORI  R16,LOW(8)
_0x2000033:
	ORI  R16,LOW(2)
	ANDI R16,LOW(127)
	LDI  R19,LOW(0)
	RJMP _0x2000036
_0x2000035:
	CPI  R30,LOW(0x64)
	BREQ _0x2000039
	CPI  R30,LOW(0x69)
	BRNE _0x200003A
_0x2000039:
	ORI  R16,LOW(4)
	RJMP _0x200003B
_0x200003A:
	CPI  R30,LOW(0x75)
	BRNE _0x200003C
_0x200003B:
	LDI  R30,LOW(_tbl10_G100*2)
	LDI  R31,HIGH(_tbl10_G100*2)
	STD  Y+6,R30
	STD  Y+6+1,R31
	LDI  R17,LOW(5)
	RJMP _0x200003D
_0x200003C:
	CPI  R30,LOW(0x58)
	BRNE _0x200003F
	ORI  R16,LOW(8)
	RJMP _0x2000040
_0x200003F:
	CPI  R30,LOW(0x78)
	BREQ PC+2
	RJMP _0x2000071
_0x2000040:
	LDI  R30,LOW(_tbl16_G100*2)
	LDI  R31,HIGH(_tbl16_G100*2)
	STD  Y+6,R30
	STD  Y+6+1,R31
	LDI  R17,LOW(4)
_0x200003D:
	SBRS R16,2
	RJMP _0x2000042
	RCALL SUBOPT_0x23
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	ADIW R26,4
	LD   R30,X+
	LD   R31,X+
	STD  Y+10,R30
	STD  Y+10+1,R31
	LDD  R26,Y+11
	TST  R26
	BRPL _0x2000043
	RCALL __ANEGW1
	STD  Y+10,R30
	STD  Y+10+1,R31
	LDI  R20,LOW(45)
_0x2000043:
	CPI  R20,0
	BREQ _0x2000044
	SUBI R17,-LOW(1)
	RJMP _0x2000045
_0x2000044:
	ANDI R16,LOW(251)
_0x2000045:
	RJMP _0x2000046
_0x2000042:
	RCALL SUBOPT_0x23
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	ADIW R26,4
	__GETW1P
	STD  Y+10,R30
	STD  Y+10+1,R31
_0x2000046:
_0x2000036:
	SBRC R16,0
	RJMP _0x2000047
_0x2000048:
	CP   R17,R21
	BRSH _0x200004A
	SBRS R16,7
	RJMP _0x200004B
	SBRS R16,2
	RJMP _0x200004C
	ANDI R16,LOW(251)
	MOV  R18,R20
	SUBI R17,LOW(1)
	RJMP _0x200004D
_0x200004C:
	LDI  R18,LOW(48)
_0x200004D:
	RJMP _0x200004E
_0x200004B:
	LDI  R18,LOW(32)
_0x200004E:
	RCALL SUBOPT_0x22
	SUBI R21,LOW(1)
	RJMP _0x2000048
_0x200004A:
_0x2000047:
	MOV  R19,R17
	SBRS R16,1
	RJMP _0x200004F
_0x2000050:
	CPI  R19,0
	BREQ _0x2000052
	SBRS R16,3
	RJMP _0x2000053
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	LPM  R18,Z+
	STD  Y+6,R30
	STD  Y+6+1,R31
	RJMP _0x2000054
_0x2000053:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	LD   R18,X+
	STD  Y+6,R26
	STD  Y+6+1,R27
_0x2000054:
	RCALL SUBOPT_0x22
	CPI  R21,0
	BREQ _0x2000055
	SUBI R21,LOW(1)
_0x2000055:
	SUBI R19,LOW(1)
	RJMP _0x2000050
_0x2000052:
	RJMP _0x2000056
_0x200004F:
_0x2000058:
	LDI  R18,LOW(48)
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	RCALL __GETW1PF
	STD  Y+8,R30
	STD  Y+8+1,R31
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	ADIW R30,2
	STD  Y+6,R30
	STD  Y+6+1,R31
_0x200005A:
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	CP   R26,R30
	CPC  R27,R31
	BRLO _0x200005C
	SUBI R18,-LOW(1)
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	LDD  R30,Y+10
	LDD  R31,Y+10+1
	SUB  R30,R26
	SBC  R31,R27
	STD  Y+10,R30
	STD  Y+10+1,R31
	RJMP _0x200005A
_0x200005C:
	CPI  R18,58
	BRLO _0x200005D
	SBRS R16,3
	RJMP _0x200005E
	SUBI R18,-LOW(7)
	RJMP _0x200005F
_0x200005E:
	SUBI R18,-LOW(39)
_0x200005F:
_0x200005D:
	SBRC R16,4
	RJMP _0x2000061
	CPI  R18,49
	BRSH _0x2000063
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	SBIW R26,1
	BRNE _0x2000062
_0x2000063:
	RJMP _0x20000CD
_0x2000062:
	CP   R21,R19
	BRLO _0x2000067
	SBRS R16,0
	RJMP _0x2000068
_0x2000067:
	RJMP _0x2000066
_0x2000068:
	LDI  R18,LOW(32)
	SBRS R16,7
	RJMP _0x2000069
	LDI  R18,LOW(48)
_0x20000CD:
	ORI  R16,LOW(16)
	SBRS R16,2
	RJMP _0x200006A
	ANDI R16,LOW(251)
	ST   -Y,R20
	RCALL SUBOPT_0x24
	CPI  R21,0
	BREQ _0x200006B
	SUBI R21,LOW(1)
_0x200006B:
_0x200006A:
_0x2000069:
_0x2000061:
	RCALL SUBOPT_0x22
	CPI  R21,0
	BREQ _0x200006C
	SUBI R21,LOW(1)
_0x200006C:
_0x2000066:
	SUBI R19,LOW(1)
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	SBIW R26,2
	BRLO _0x2000059
	RJMP _0x2000058
_0x2000059:
_0x2000056:
	SBRS R16,0
	RJMP _0x200006D
_0x200006E:
	CPI  R21,0
	BREQ _0x2000070
	SUBI R21,LOW(1)
	LDI  R30,LOW(32)
	ST   -Y,R30
	RCALL SUBOPT_0x24
	RJMP _0x200006E
_0x2000070:
_0x200006D:
_0x2000071:
_0x2000030:
_0x20000CC:
	LDI  R17,LOW(0)
_0x200001B:
	RJMP _0x2000016
_0x2000018:
	LDD  R26,Y+12
	LDD  R27,Y+12+1
	LD   R30,X+
	LD   R31,X+
	RCALL __LOADLOCR6
	ADIW R28,20
	RET
; .FEND
_printf:
; .FSTART _printf
	PUSH R15
	MOV  R15,R24
	SBIW R28,6
	ST   -Y,R17
	ST   -Y,R16
	MOVW R26,R28
	ADIW R26,4
	__ADDW2R15
	MOVW R16,R26
	LDI  R30,LOW(0)
	STD  Y+4,R30
	STD  Y+4+1,R30
	STD  Y+6,R30
	STD  Y+6+1,R30
	MOVW R26,R28
	ADIW R26,8
	__ADDW2R15
	LD   R30,X+
	LD   R31,X+
	ST   -Y,R31
	ST   -Y,R30
	ST   -Y,R17
	ST   -Y,R16
	LDI  R30,LOW(_put_usart_G100)
	LDI  R31,HIGH(_put_usart_G100)
	ST   -Y,R31
	ST   -Y,R30
	MOVW R26,R28
	ADIW R26,8
	RCALL __print_G100
	LDD  R17,Y+1
	LDD  R16,Y+0
	ADIW R28,8
	POP  R15
	RET
; .FEND

	.CSEG

	.CSEG
_strlen:
; .FSTART _strlen
	ST   -Y,R27
	ST   -Y,R26
    ld   r26,y+
    ld   r27,y+
    clr  r30
    clr  r31
strlen0:
    ld   r22,x+
    tst  r22
    breq strlen1
    adiw r30,1
    rjmp strlen0
strlen1:
    ret
; .FEND
_strlenf:
; .FSTART _strlenf
	ST   -Y,R27
	ST   -Y,R26
    clr  r26
    clr  r27
    ld   r30,y+
    ld   r31,y+
strlenf0:
	lpm  r0,z+
    tst  r0
    breq strlenf1
    adiw r26,1
    rjmp strlenf0
strlenf1:
    movw r30,r26
    ret
; .FEND

	.DSEG
_ICS:
	.BYTE 0xC
_ptr:
	.BYTE 0xC

	.CSEG
;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
SUBOPT_0x0:
	RCALL __SAVELOCR4
	LDI  R17,85
	LDI  R16,0
	LDI  R19,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0x1:
	LDI  R30,LOW(67)
	OUT  0x14,R30
	LDI  R30,LOW(0)
	OUT  0x15,R30
	LDI  R30,LOW(128)
	OUT  0x11,R30
	LDI  R30,LOW(0)
	OUT  0x12,R30
	CLR  R7
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
SUBOPT_0x2:
	LDI  R31,0
	LDI  R26,LOW(1)
	LDI  R27,HIGH(1)
	RCALL __MANDW12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:19 WORDS
SUBOPT_0x3:
	MOV  R30,R26
	ROR  R30
	LDI  R30,0
	ROR  R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x4:
	MOV  R0,R30
	LDI  R26,0
	SBIC 0x19,4
	LDI  R26,1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x5:
	MUL  R30,R26
	MOVW R30,R0
	ADD  R30,R18
	MOV  R0,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:22 WORDS
SUBOPT_0x6:
	OUT  0x1A,R30
	LDI  R30,LOW(0)
	OUT  0x1B,R30
	OUT  0x17,R30
	OUT  0x18,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:19 WORDS
SUBOPT_0x7:
	OUT  0x14,R30
	LDI  R30,LOW(0)
	OUT  0x15,R30
	LDI  R30,LOW(128)
	OUT  0x11,R30
	LDI  R30,LOW(0)
	OUT  0x12,R30
	CLR  R7
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0x8:
	SBI  0x15,1
	CBI  0x15,1
	LDI  R26,LOW(200)
	LDI  R27,0
	RJMP _delay_ms

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
SUBOPT_0x9:
	MOV  R30,R16
	LSR  R30
	MOV  R0,R30
	LDI  R26,0
	SBIC 0x19,0
	LDI  R26,1
	RJMP SUBOPT_0x3

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0xA:
	OR   R30,R0
	MOV  R16,R30
	MOV  R30,R19
	LSR  R30
	MOV  R0,R30
	LDI  R26,0
	SBIS 0x13,6
	LDI  R26,1
	RJMP SUBOPT_0x3

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
SUBOPT_0xB:
	MOV  R30,R17
	MOV  R26,R16
	__EQB12
	MOV  R0,R30
	MOV  R30,R17
	MOV  R26,R19
	__EQB12
	OR   R30,R0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
SUBOPT_0xC:
	LDI  R30,LOW(255)
	EOR  R17,R30
	LDI  R26,LOW(200)
	LDI  R27,0
	RJMP _delay_ms

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xD:
	MOV  R30,R17
	ANDI R30,LOW(0x80)
	LDI  R31,0
	RCALL __ASRW3
	RCALL __ASRW4
	CPI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xE:
	MOV  R30,R17
	ANDI R30,LOW(0x40)
	LDI  R31,0
	RCALL __ASRW2
	RCALL __ASRW4
	CPI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
SUBOPT_0xF:
	MOV  R30,R17
	ANDI R30,LOW(0x20)
	LDI  R31,0
	ASR  R31
	ROR  R30
	RCALL __ASRW4
	CPI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x10:
	MOV  R30,R17
	ANDI R30,LOW(0x10)
	LDI  R31,0
	RCALL __ASRW4
	CPI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x11:
	MOV  R30,R17
	ANDI R30,LOW(0x8)
	LDI  R31,0
	RCALL __ASRW3
	CPI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x12:
	MOV  R30,R17
	ANDI R30,LOW(0x4)
	LDI  R31,0
	RCALL __ASRW2
	CPI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x13:
	MOV  R30,R17
	ANDI R30,LOW(0x82)
	LDI  R31,0
	ASR  R31
	ROR  R30
	CPI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x14:
	SBI  0x15,6
	CBI  0x15,6
	LDI  R26,LOW(200)
	LDI  R27,0
	RJMP _delay_ms

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
SUBOPT_0x15:
	OR   R30,R0
	MOV  R16,R30
	SBI  0x15,6
	CBI  0x15,6
	LDI  R26,LOW(500)
	LDI  R27,HIGH(500)
	RJMP _delay_ms

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x16:
	CBI  0x1B,0
	LDI  R26,LOW(1000)
	LDI  R27,HIGH(1000)
	RJMP _delay_ms

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x17:
	ST   -Y,R17
	ST   -Y,R16
	LDI  R17,5
	LDI  R16,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:16 WORDS
SUBOPT_0x18:
	MOV  R30,R17
	ANDI R30,LOW(0x8)
	LDI  R31,0
	RCALL __ASRW3
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:16 WORDS
SUBOPT_0x19:
	MOV  R30,R17
	ANDI R30,LOW(0x4)
	LDI  R31,0
	RCALL __ASRW2
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:22 WORDS
SUBOPT_0x1A:
	MOV  R30,R17
	ANDI R30,LOW(0x2)
	LDI  R31,0
	ASR  R31
	ROR  R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
SUBOPT_0x1B:
	MOV  R30,R17
	ANDI R30,LOW(0x1)
	MOV  R16,R30
	CPI  R16,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:19 WORDS
SUBOPT_0x1C:
	MOV  R30,R17
	ANDI R30,LOW(0x1)
	LDI  R27,0
	SBRC R26,7
	SER  R27
	LDI  R31,0
	CP   R30,R26
	CPC  R31,R27
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1D:
	EOR  R17,R30
	LDI  R26,LOW(100)
	LDI  R27,0
	RJMP _delay_ms

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x1E:
	MOV  R30,R17
	ANDI R30,LOW(0x20)
	LDI  R31,0
	ASR  R31
	ROR  R30
	RCALL __ASRW4
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1F:
	MOV  R30,R17
	ANDI R30,LOW(0x10)
	LDI  R31,0
	RCALL __ASRW4
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x20:
	LDI  R26,0
	SBIC 0x13,1
	LDI  R26,1
	RJMP SUBOPT_0x1C

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
SUBOPT_0x21:
	LDI  R31,0
	LSL  R30
	ROL  R31
	ADD  R26,R30
	ADC  R27,R31
	LD   R30,X+
	LD   R31,X+
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
SUBOPT_0x22:
	ST   -Y,R18
	LDD  R26,Y+13
	LDD  R27,Y+13+1
	LDD  R30,Y+15
	LDD  R31,Y+15+1
	ICALL
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
SUBOPT_0x23:
	LDD  R30,Y+16
	LDD  R31,Y+16+1
	SBIW R30,4
	STD  Y+16,R30
	STD  Y+16+1,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0x24:
	LDD  R26,Y+13
	LDD  R27,Y+13+1
	LDD  R30,Y+15
	LDD  R31,Y+15+1
	ICALL
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0x25:
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	ADIW R26,4
	LD   R30,X+
	LD   R31,X+
	STD  Y+6,R30
	STD  Y+6+1,R31
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	RET

;RUNTIME LIBRARY

	.CSEG
__SAVELOCR6:
	ST   -Y,R21
__SAVELOCR5:
	ST   -Y,R20
__SAVELOCR4:
	ST   -Y,R19
__SAVELOCR3:
	ST   -Y,R18
__SAVELOCR2:
	ST   -Y,R17
	ST   -Y,R16
	RET

__LOADLOCR6:
	LDD  R21,Y+5
__LOADLOCR5:
	LDD  R20,Y+4
__LOADLOCR4:
	LDD  R19,Y+3
__LOADLOCR3:
	LDD  R18,Y+2
__LOADLOCR2:
	LDD  R17,Y+1
	LD   R16,Y
	RET

__ANEGW1:
	NEG  R31
	NEG  R30
	SBCI R31,0
	RET

__ASRW4:
	ASR  R31
	ROR  R30
__ASRW3:
	ASR  R31
	ROR  R30
__ASRW2:
	ASR  R31
	ROR  R30
	ASR  R31
	ROR  R30
	RET

__MANDW12:
	CLT
	SBRS R31,7
	RJMP __MANDW121
	RCALL __ANEGW1
	SET
__MANDW121:
	AND  R30,R26
	AND  R31,R27
	BRTC __MANDW122
	RCALL __ANEGW1
__MANDW122:
	RET

__GETW1PF:
	LPM  R0,Z+
	LPM  R31,Z
	MOV  R30,R0
	RET

__PUTPARD1:
	ST   -Y,R23
	ST   -Y,R22
	ST   -Y,R31
	ST   -Y,R30
	RET

_delay_ms:
	adiw r26,0
	breq __delay_ms1
__delay_ms0:
	wdr
	__DELAY_USW 0x7D0
	sbiw r26,1
	brne __delay_ms0
__delay_ms1:
	ret

;END OF CODE MARKER
__END_OF_CODE:
